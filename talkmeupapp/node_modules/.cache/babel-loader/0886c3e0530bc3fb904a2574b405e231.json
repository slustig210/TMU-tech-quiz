{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.displayvideo_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nconst googleapis_common_1 = require(\"googleapis-common\");\n\nvar displayvideo_v1;\n\n(function (displayvideo_v1) {\n  /**\n   * Display &amp; Video 360 API\n   *\n   * Display &amp; Video 360 API allows users to manage and create campaigns and reports.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const displayvideo = google.displayvideo('v1');\n   * ```\n   */\n  class Displayvideo {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.advertisers = new Resource$Advertisers(this.context);\n      this.combinedAudiences = new Resource$Combinedaudiences(this.context);\n      this.customBiddingAlgorithms = new Resource$Custombiddingalgorithms(this.context);\n      this.customLists = new Resource$Customlists(this.context);\n      this.firstAndThirdPartyAudiences = new Resource$Firstandthirdpartyaudiences(this.context);\n      this.floodlightGroups = new Resource$Floodlightgroups(this.context);\n      this.googleAudiences = new Resource$Googleaudiences(this.context);\n      this.inventorySourceGroups = new Resource$Inventorysourcegroups(this.context);\n      this.inventorySources = new Resource$Inventorysources(this.context);\n      this.media = new Resource$Media(this.context);\n      this.partners = new Resource$Partners(this.context);\n      this.sdfdownloadtasks = new Resource$Sdfdownloadtasks(this.context);\n      this.targetingTypes = new Resource$Targetingtypes(this.context);\n      this.users = new Resource$Users(this.context);\n    }\n\n  }\n\n  displayvideo_v1.Displayvideo = Displayvideo;\n\n  class Resource$Advertisers {\n    constructor(context) {\n      this.context = context;\n      this.assets = new Resource$Advertisers$Assets(this.context);\n      this.campaigns = new Resource$Advertisers$Campaigns(this.context);\n      this.channels = new Resource$Advertisers$Channels(this.context);\n      this.creatives = new Resource$Advertisers$Creatives(this.context);\n      this.insertionOrders = new Resource$Advertisers$Insertionorders(this.context);\n      this.lineItems = new Resource$Advertisers$Lineitems(this.context);\n      this.locationLists = new Resource$Advertisers$Locationlists(this.context);\n      this.manualTriggers = new Resource$Advertisers$Manualtriggers(this.context);\n      this.negativeKeywordLists = new Resource$Advertisers$Negativekeywordlists(this.context);\n      this.targetingTypes = new Resource$Advertisers$Targetingtypes(this.context);\n    }\n\n    audit(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}:audit').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    bulkEditAdvertiserAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}:bulkEditAdvertiserAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    bulkListAdvertiserAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}:bulkListAdvertiserAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Advertisers = Resource$Advertisers;\n\n  class Resource$Advertisers$Assets {\n    constructor(context) {\n      this.context = context;\n    }\n\n    upload(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/assets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/v1/advertisers/{+advertiserId}/assets').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Advertisers$Assets = Resource$Advertisers$Assets;\n\n  class Resource$Advertisers$Campaigns {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/campaigns').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/campaigns/{+campaignId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'campaignId'],\n        pathParams: ['advertiserId', 'campaignId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/campaigns/{+campaignId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'campaignId'],\n        pathParams: ['advertiserId', 'campaignId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/campaigns').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/campaigns/{+campaignId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'campaignId'],\n        pathParams: ['advertiserId', 'campaignId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Advertisers$Campaigns = Resource$Advertisers$Campaigns;\n\n  class Resource$Advertisers$Channels {\n    constructor(context) {\n      this.context = context;\n      this.sites = new Resource$Advertisers$Channels$Sites(this.context);\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/channels/{+channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'channelId'],\n        pathParams: ['advertiserId', 'channelId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/channels/{channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'channelId'],\n        pathParams: ['advertiserId', 'channelId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Advertisers$Channels = Resource$Advertisers$Channels;\n\n  class Resource$Advertisers$Channels$Sites {\n    constructor(context) {\n      this.context = context;\n    }\n\n    bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{advertiserId}/channels/{+channelId}/sites:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'channelId'],\n        pathParams: ['advertiserId', 'channelId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{advertiserId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'channelId'],\n        pathParams: ['advertiserId', 'channelId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{advertiserId}/channels/{+channelId}/sites/{+urlOrAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'channelId', 'urlOrAppId'],\n        pathParams: ['advertiserId', 'channelId', 'urlOrAppId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'channelId'],\n        pathParams: ['advertiserId', 'channelId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Advertisers$Channels$Sites = Resource$Advertisers$Channels$Sites;\n\n  class Resource$Advertisers$Creatives {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/creatives/{+creativeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'creativeId'],\n        pathParams: ['advertiserId', 'creativeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/creatives/{+creativeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'creativeId'],\n        pathParams: ['advertiserId', 'creativeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/creatives/{+creativeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'creativeId'],\n        pathParams: ['advertiserId', 'creativeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Advertisers$Creatives = Resource$Advertisers$Creatives;\n\n  class Resource$Advertisers$Insertionorders {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/insertionOrders').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'insertionOrderId'],\n        pathParams: ['advertiserId', 'insertionOrderId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'insertionOrderId'],\n        pathParams: ['advertiserId', 'insertionOrderId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/insertionOrders').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'insertionOrderId'],\n        pathParams: ['advertiserId', 'insertionOrderId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Advertisers$Insertionorders = Resource$Advertisers$Insertionorders;\n\n  class Resource$Advertisers$Lineitems {\n    constructor(context) {\n      this.context = context;\n      this.targetingTypes = new Resource$Advertisers$Lineitems$Targetingtypes(this.context);\n    }\n\n    bulkEditLineItemAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/lineItems/{+lineItemId}:bulkEditLineItemAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId'],\n        pathParams: ['advertiserId', 'lineItemId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    bulkListLineItemAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/lineItems/{+lineItemId}:bulkListLineItemAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId'],\n        pathParams: ['advertiserId', 'lineItemId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/lineItems').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/lineItems/{+lineItemId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId'],\n        pathParams: ['advertiserId', 'lineItemId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/lineItems/{+lineItemId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId'],\n        pathParams: ['advertiserId', 'lineItemId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/lineItems').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/lineItems/{+lineItemId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId'],\n        pathParams: ['advertiserId', 'lineItemId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Advertisers$Lineitems = Resource$Advertisers$Lineitems;\n\n  class Resource$Advertisers$Lineitems$Targetingtypes {\n    constructor(context) {\n      this.context = context;\n      this.assignedTargetingOptions = new Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions(this.context);\n    }\n\n  }\n\n  displayvideo_v1.Resource$Advertisers$Lineitems$Targetingtypes = Resource$Advertisers$Lineitems$Targetingtypes;\n\n  class Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId', 'targetingType'],\n        pathParams: ['advertiserId', 'lineItemId', 'targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId', 'targetingType', 'assignedTargetingOptionId'],\n        pathParams: ['advertiserId', 'assignedTargetingOptionId', 'lineItemId', 'targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId', 'targetingType', 'assignedTargetingOptionId'],\n        pathParams: ['advertiserId', 'assignedTargetingOptionId', 'lineItemId', 'targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId', 'targetingType'],\n        pathParams: ['advertiserId', 'lineItemId', 'targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions = Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions;\n\n  class Resource$Advertisers$Locationlists {\n    constructor(context) {\n      this.context = context;\n      this.assignedLocations = new Resource$Advertisers$Locationlists$Assignedlocations(this.context);\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/locationLists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/locationLists/{+locationListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'locationListId'],\n        pathParams: ['advertiserId', 'locationListId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/locationLists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/locationLists/{locationListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'locationListId'],\n        pathParams: ['advertiserId', 'locationListId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Advertisers$Locationlists = Resource$Advertisers$Locationlists;\n\n  class Resource$Advertisers$Locationlists$Assignedlocations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{advertiserId}/locationLists/{+locationListId}/assignedLocations:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'locationListId'],\n        pathParams: ['advertiserId', 'locationListId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'locationListId'],\n        pathParams: ['advertiserId', 'locationListId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations/{+assignedLocationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'locationListId', 'assignedLocationId'],\n        pathParams: ['advertiserId', 'assignedLocationId', 'locationListId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'locationListId'],\n        pathParams: ['advertiserId', 'locationListId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Advertisers$Locationlists$Assignedlocations = Resource$Advertisers$Locationlists$Assignedlocations;\n\n  class Resource$Advertisers$Manualtriggers {\n    constructor(context) {\n      this.context = context;\n    }\n\n    activate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/manualTriggers/{+triggerId}:activate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'triggerId'],\n        pathParams: ['advertiserId', 'triggerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/manualTriggers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    deactivate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/manualTriggers/{+triggerId}:deactivate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'triggerId'],\n        pathParams: ['advertiserId', 'triggerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/manualTriggers/{+triggerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'triggerId'],\n        pathParams: ['advertiserId', 'triggerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/manualTriggers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/manualTriggers/{+triggerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'triggerId'],\n        pathParams: ['advertiserId', 'triggerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Advertisers$Manualtriggers = Resource$Advertisers$Manualtriggers;\n\n  class Resource$Advertisers$Negativekeywordlists {\n    constructor(context) {\n      this.context = context;\n      this.negativeKeywords = new Resource$Advertisers$Negativekeywordlists$Negativekeywords(this.context);\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/negativeKeywordLists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/negativeKeywordLists/{+negativeKeywordListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'negativeKeywordListId'],\n        pathParams: ['advertiserId', 'negativeKeywordListId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/negativeKeywordLists/{+negativeKeywordListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'negativeKeywordListId'],\n        pathParams: ['advertiserId', 'negativeKeywordListId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/negativeKeywordLists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/negativeKeywordLists/{negativeKeywordListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'negativeKeywordListId'],\n        pathParams: ['advertiserId', 'negativeKeywordListId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Advertisers$Negativekeywordlists = Resource$Advertisers$Negativekeywordlists;\n\n  class Resource$Advertisers$Negativekeywordlists$Negativekeywords {\n    constructor(context) {\n      this.context = context;\n    }\n\n    bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'negativeKeywordListId'],\n        pathParams: ['advertiserId', 'negativeKeywordListId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'negativeKeywordListId'],\n        pathParams: ['advertiserId', 'negativeKeywordListId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords/{+keywordValue}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'negativeKeywordListId', 'keywordValue'],\n        pathParams: ['advertiserId', 'keywordValue', 'negativeKeywordListId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'negativeKeywordListId'],\n        pathParams: ['advertiserId', 'negativeKeywordListId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Advertisers$Negativekeywordlists$Negativekeywords = Resource$Advertisers$Negativekeywordlists$Negativekeywords;\n\n  class Resource$Advertisers$Targetingtypes {\n    constructor(context) {\n      this.context = context;\n      this.assignedTargetingOptions = new Resource$Advertisers$Targetingtypes$Assignedtargetingoptions(this.context);\n    }\n\n  }\n\n  displayvideo_v1.Resource$Advertisers$Targetingtypes = Resource$Advertisers$Targetingtypes;\n\n  class Resource$Advertisers$Targetingtypes$Assignedtargetingoptions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'targetingType'],\n        pathParams: ['advertiserId', 'targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'targetingType', 'assignedTargetingOptionId'],\n        pathParams: ['advertiserId', 'assignedTargetingOptionId', 'targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'targetingType', 'assignedTargetingOptionId'],\n        pathParams: ['advertiserId', 'assignedTargetingOptionId', 'targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'targetingType'],\n        pathParams: ['advertiserId', 'targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Advertisers$Targetingtypes$Assignedtargetingoptions = Resource$Advertisers$Targetingtypes$Assignedtargetingoptions;\n\n  class Resource$Combinedaudiences {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/combinedAudiences/{+combinedAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['combinedAudienceId'],\n        pathParams: ['combinedAudienceId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/combinedAudiences').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Combinedaudiences = Resource$Combinedaudiences;\n\n  class Resource$Custombiddingalgorithms {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/customBiddingAlgorithms/{+customBiddingAlgorithmId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customBiddingAlgorithmId'],\n        pathParams: ['customBiddingAlgorithmId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/customBiddingAlgorithms').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Custombiddingalgorithms = Resource$Custombiddingalgorithms;\n\n  class Resource$Customlists {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/customLists/{+customListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customListId'],\n        pathParams: ['customListId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/customLists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Customlists = Resource$Customlists;\n\n  class Resource$Firstandthirdpartyaudiences {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/firstAndThirdPartyAudiences/{+firstAndThirdPartyAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['firstAndThirdPartyAudienceId'],\n        pathParams: ['firstAndThirdPartyAudienceId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/firstAndThirdPartyAudiences').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Firstandthirdpartyaudiences = Resource$Firstandthirdpartyaudiences;\n\n  class Resource$Floodlightgroups {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/floodlightGroups/{+floodlightGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['floodlightGroupId'],\n        pathParams: ['floodlightGroupId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/floodlightGroups/{floodlightGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['floodlightGroupId'],\n        pathParams: ['floodlightGroupId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Floodlightgroups = Resource$Floodlightgroups;\n\n  class Resource$Googleaudiences {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/googleAudiences/{+googleAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['googleAudienceId'],\n        pathParams: ['googleAudienceId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/googleAudiences').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Googleaudiences = Resource$Googleaudiences;\n\n  class Resource$Inventorysourcegroups {\n    constructor(context) {\n      this.context = context;\n      this.assignedInventorySources = new Resource$Inventorysourcegroups$Assignedinventorysources(this.context);\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/inventorySourceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/inventorySourceGroups/{+inventorySourceGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['inventorySourceGroupId'],\n        pathParams: ['inventorySourceGroupId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/inventorySourceGroups/{+inventorySourceGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['inventorySourceGroupId'],\n        pathParams: ['inventorySourceGroupId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/inventorySourceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/inventorySourceGroups/{inventorySourceGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['inventorySourceGroupId'],\n        pathParams: ['inventorySourceGroupId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Inventorysourcegroups = Resource$Inventorysourcegroups;\n\n  class Resource$Inventorysourcegroups$Assignedinventorysources {\n    constructor(context) {\n      this.context = context;\n    }\n\n    bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['inventorySourceGroupId'],\n        pathParams: ['inventorySourceGroupId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['inventorySourceGroupId'],\n        pathParams: ['inventorySourceGroupId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources/{+assignedInventorySourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['inventorySourceGroupId', 'assignedInventorySourceId'],\n        pathParams: ['assignedInventorySourceId', 'inventorySourceGroupId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['inventorySourceGroupId'],\n        pathParams: ['inventorySourceGroupId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Inventorysourcegroups$Assignedinventorysources = Resource$Inventorysourcegroups$Assignedinventorysources;\n\n  class Resource$Inventorysources {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/inventorySources/{+inventorySourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['inventorySourceId'],\n        pathParams: ['inventorySourceId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/inventorySources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Inventorysources = Resource$Inventorysources;\n\n  class Resource$Media {\n    constructor(context) {\n      this.context = context;\n    }\n\n    download(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/download/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['resourceName'],\n        pathParams: ['resourceName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Media = Resource$Media;\n\n  class Resource$Partners {\n    constructor(context) {\n      this.context = context;\n      this.channels = new Resource$Partners$Channels(this.context);\n      this.targetingTypes = new Resource$Partners$Targetingtypes(this.context);\n    }\n\n    bulkEditPartnerAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/partners/{+partnerId}:bulkEditPartnerAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['partnerId'],\n        pathParams: ['partnerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/partners/{+partnerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['partnerId'],\n        pathParams: ['partnerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/partners').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Partners = Resource$Partners;\n\n  class Resource$Partners$Channels {\n    constructor(context) {\n      this.context = context;\n      this.sites = new Resource$Partners$Channels$Sites(this.context);\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/partners/{+partnerId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['partnerId'],\n        pathParams: ['partnerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/partners/{+partnerId}/channels/{+channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'channelId'],\n        pathParams: ['channelId', 'partnerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/partners/{+partnerId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['partnerId'],\n        pathParams: ['partnerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/partners/{+partnerId}/channels/{channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'channelId'],\n        pathParams: ['channelId', 'partnerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Partners$Channels = Resource$Partners$Channels;\n\n  class Resource$Partners$Channels$Sites {\n    constructor(context) {\n      this.context = context;\n    }\n\n    bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/partners/{partnerId}/channels/{+channelId}/sites:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'channelId'],\n        pathParams: ['channelId', 'partnerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/partners/{partnerId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'channelId'],\n        pathParams: ['channelId', 'partnerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/partners/{partnerId}/channels/{+channelId}/sites/{+urlOrAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'channelId', 'urlOrAppId'],\n        pathParams: ['channelId', 'partnerId', 'urlOrAppId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/partners/{+partnerId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'channelId'],\n        pathParams: ['channelId', 'partnerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Partners$Channels$Sites = Resource$Partners$Channels$Sites;\n\n  class Resource$Partners$Targetingtypes {\n    constructor(context) {\n      this.context = context;\n      this.assignedTargetingOptions = new Resource$Partners$Targetingtypes$Assignedtargetingoptions(this.context);\n    }\n\n  }\n\n  displayvideo_v1.Resource$Partners$Targetingtypes = Resource$Partners$Targetingtypes;\n\n  class Resource$Partners$Targetingtypes$Assignedtargetingoptions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'targetingType'],\n        pathParams: ['partnerId', 'targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'targetingType', 'assignedTargetingOptionId'],\n        pathParams: ['assignedTargetingOptionId', 'partnerId', 'targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'targetingType', 'assignedTargetingOptionId'],\n        pathParams: ['assignedTargetingOptionId', 'partnerId', 'targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'targetingType'],\n        pathParams: ['partnerId', 'targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Partners$Targetingtypes$Assignedtargetingoptions = Resource$Partners$Targetingtypes$Assignedtargetingoptions;\n\n  class Resource$Sdfdownloadtasks {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Sdfdownloadtasks$Operations(this.context);\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/sdfdownloadtasks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Sdfdownloadtasks = Resource$Sdfdownloadtasks;\n\n  class Resource$Sdfdownloadtasks$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Sdfdownloadtasks$Operations = Resource$Sdfdownloadtasks$Operations;\n\n  class Resource$Targetingtypes {\n    constructor(context) {\n      this.context = context;\n      this.targetingOptions = new Resource$Targetingtypes$Targetingoptions(this.context);\n    }\n\n  }\n\n  displayvideo_v1.Resource$Targetingtypes = Resource$Targetingtypes;\n\n  class Resource$Targetingtypes$Targetingoptions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/targetingTypes/{+targetingType}/targetingOptions/{+targetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['targetingType', 'targetingOptionId'],\n        pathParams: ['targetingOptionId', 'targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/targetingTypes/{+targetingType}/targetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['targetingType'],\n        pathParams: ['targetingType'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Targetingtypes$Targetingoptions = Resource$Targetingtypes$Targetingoptions;\n\n  class Resource$Users {\n    constructor(context) {\n      this.context = context;\n    }\n\n    bulkEditAssignedUserRoles(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/users/{+userId}:bulkEditAssignedUserRoles').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['userId'],\n        pathParams: ['userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/users/{+userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['userId'],\n        pathParams: ['userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/users/{+userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userId'],\n        pathParams: ['userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/users/{+userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['userId'],\n        pathParams: ['userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  displayvideo_v1.Resource$Users = Resource$Users;\n})(displayvideo_v1 = exports.displayvideo_v1 || (exports.displayvideo_v1 = {}));","map":{"version":3,"sources":["C:/Users/lsslg/Desktop/talkmeupapp/node_modules/googleapis/build/src/apis/displayvideo/v1.js"],"names":["Object","defineProperty","exports","value","displayvideo_v1","googleapis_common_1","require","Displayvideo","constructor","options","google","context","_options","advertisers","Resource$Advertisers","combinedAudiences","Resource$Combinedaudiences","customBiddingAlgorithms","Resource$Custombiddingalgorithms","customLists","Resource$Customlists","firstAndThirdPartyAudiences","Resource$Firstandthirdpartyaudiences","floodlightGroups","Resource$Floodlightgroups","googleAudiences","Resource$Googleaudiences","inventorySourceGroups","Resource$Inventorysourcegroups","inventorySources","Resource$Inventorysources","media","Resource$Media","partners","Resource$Partners","sdfdownloadtasks","Resource$Sdfdownloadtasks","targetingTypes","Resource$Targetingtypes","users","Resource$Users","assets","Resource$Advertisers$Assets","campaigns","Resource$Advertisers$Campaigns","channels","Resource$Advertisers$Channels","creatives","Resource$Advertisers$Creatives","insertionOrders","Resource$Advertisers$Insertionorders","lineItems","Resource$Advertisers$Lineitems","locationLists","Resource$Advertisers$Locationlists","manualTriggers","Resource$Advertisers$Manualtriggers","negativeKeywordLists","Resource$Advertisers$Negativekeywordlists","Resource$Advertisers$Targetingtypes","audit","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","bulkEditAdvertiserAssignedTargetingOptions","bulkListAdvertiserAssignedTargetingOptions","create","delete","get","list","patch","upload","mediaUrl","sites","Resource$Advertisers$Channels$Sites","bulkEdit","Resource$Advertisers$Lineitems$Targetingtypes","bulkEditLineItemAssignedTargetingOptions","bulkListLineItemAssignedTargetingOptions","assignedTargetingOptions","Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions","assignedLocations","Resource$Advertisers$Locationlists$Assignedlocations","activate","deactivate","negativeKeywords","Resource$Advertisers$Negativekeywordlists$Negativekeywords","Resource$Advertisers$Targetingtypes$Assignedtargetingoptions","assignedInventorySources","Resource$Inventorysourcegroups$Assignedinventorysources","download","Resource$Partners$Channels","Resource$Partners$Targetingtypes","bulkEditPartnerAssignedTargetingOptions","Resource$Partners$Channels$Sites","Resource$Partners$Targetingtypes$Assignedtargetingoptions","operations","Resource$Sdfdownloadtasks$Operations","targetingOptions","Resource$Targetingtypes$Targetingoptions","bulkEditAssignedUserRoles"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.displayvideo_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar displayvideo_v1;\n(function (displayvideo_v1) {\n    /**\n     * Display &amp; Video 360 API\n     *\n     * Display &amp; Video 360 API allows users to manage and create campaigns and reports.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const displayvideo = google.displayvideo('v1');\n     * ```\n     */\n    class Displayvideo {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.advertisers = new Resource$Advertisers(this.context);\n            this.combinedAudiences = new Resource$Combinedaudiences(this.context);\n            this.customBiddingAlgorithms = new Resource$Custombiddingalgorithms(this.context);\n            this.customLists = new Resource$Customlists(this.context);\n            this.firstAndThirdPartyAudiences = new Resource$Firstandthirdpartyaudiences(this.context);\n            this.floodlightGroups = new Resource$Floodlightgroups(this.context);\n            this.googleAudiences = new Resource$Googleaudiences(this.context);\n            this.inventorySourceGroups = new Resource$Inventorysourcegroups(this.context);\n            this.inventorySources = new Resource$Inventorysources(this.context);\n            this.media = new Resource$Media(this.context);\n            this.partners = new Resource$Partners(this.context);\n            this.sdfdownloadtasks = new Resource$Sdfdownloadtasks(this.context);\n            this.targetingTypes = new Resource$Targetingtypes(this.context);\n            this.users = new Resource$Users(this.context);\n        }\n    }\n    displayvideo_v1.Displayvideo = Displayvideo;\n    class Resource$Advertisers {\n        constructor(context) {\n            this.context = context;\n            this.assets = new Resource$Advertisers$Assets(this.context);\n            this.campaigns = new Resource$Advertisers$Campaigns(this.context);\n            this.channels = new Resource$Advertisers$Channels(this.context);\n            this.creatives = new Resource$Advertisers$Creatives(this.context);\n            this.insertionOrders = new Resource$Advertisers$Insertionorders(this.context);\n            this.lineItems = new Resource$Advertisers$Lineitems(this.context);\n            this.locationLists = new Resource$Advertisers$Locationlists(this.context);\n            this.manualTriggers = new Resource$Advertisers$Manualtriggers(this.context);\n            this.negativeKeywordLists = new Resource$Advertisers$Negativekeywordlists(this.context);\n            this.targetingTypes = new Resource$Advertisers$Targetingtypes(this.context);\n        }\n        audit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/advertisers/{+advertiserId}:audit').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        bulkEditAdvertiserAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}:bulkEditAdvertiserAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        bulkListAdvertiserAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}:bulkListAdvertiserAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/advertisers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/advertisers/{+advertiserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/advertisers/{+advertiserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/advertisers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/advertisers/{+advertiserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Advertisers = Resource$Advertisers;\n    class Resource$Advertisers$Assets {\n        constructor(context) {\n            this.context = context;\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/advertisers/{+advertiserId}/assets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/v1/advertisers/{+advertiserId}/assets').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Advertisers$Assets = Resource$Advertisers$Assets;\n    class Resource$Advertisers$Campaigns {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/advertisers/{+advertiserId}/campaigns').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/campaigns/{+campaignId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'campaignId'],\n                pathParams: ['advertiserId', 'campaignId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/campaigns/{+campaignId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'campaignId'],\n                pathParams: ['advertiserId', 'campaignId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/advertisers/{+advertiserId}/campaigns').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/campaigns/{+campaignId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'campaignId'],\n                pathParams: ['advertiserId', 'campaignId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Advertisers$Campaigns = Resource$Advertisers$Campaigns;\n    class Resource$Advertisers$Channels {\n        constructor(context) {\n            this.context = context;\n            this.sites = new Resource$Advertisers$Channels$Sites(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/advertisers/{+advertiserId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/advertisers/{+advertiserId}/channels/{+channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'channelId'],\n                pathParams: ['advertiserId', 'channelId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/advertisers/{+advertiserId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/advertisers/{+advertiserId}/channels/{channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'channelId'],\n                pathParams: ['advertiserId', 'channelId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Advertisers$Channels = Resource$Advertisers$Channels;\n    class Resource$Advertisers$Channels$Sites {\n        constructor(context) {\n            this.context = context;\n        }\n        bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{advertiserId}/channels/{+channelId}/sites:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'channelId'],\n                pathParams: ['advertiserId', 'channelId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{advertiserId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'channelId'],\n                pathParams: ['advertiserId', 'channelId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{advertiserId}/channels/{+channelId}/sites/{+urlOrAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'channelId', 'urlOrAppId'],\n                pathParams: ['advertiserId', 'channelId', 'urlOrAppId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'channelId'],\n                pathParams: ['advertiserId', 'channelId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Advertisers$Channels$Sites = Resource$Advertisers$Channels$Sites;\n    class Resource$Advertisers$Creatives {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/advertisers/{+advertiserId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/creatives/{+creativeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'creativeId'],\n                pathParams: ['advertiserId', 'creativeId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/creatives/{+creativeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'creativeId'],\n                pathParams: ['advertiserId', 'creativeId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/advertisers/{+advertiserId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/creatives/{+creativeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'creativeId'],\n                pathParams: ['advertiserId', 'creativeId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Advertisers$Creatives = Resource$Advertisers$Creatives;\n    class Resource$Advertisers$Insertionorders {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/advertisers/{+advertiserId}/insertionOrders').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'insertionOrderId'],\n                pathParams: ['advertiserId', 'insertionOrderId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'insertionOrderId'],\n                pathParams: ['advertiserId', 'insertionOrderId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/advertisers/{+advertiserId}/insertionOrders').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'insertionOrderId'],\n                pathParams: ['advertiserId', 'insertionOrderId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Advertisers$Insertionorders = Resource$Advertisers$Insertionorders;\n    class Resource$Advertisers$Lineitems {\n        constructor(context) {\n            this.context = context;\n            this.targetingTypes = new Resource$Advertisers$Lineitems$Targetingtypes(this.context);\n        }\n        bulkEditLineItemAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/lineItems/{+lineItemId}:bulkEditLineItemAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'lineItemId'],\n                pathParams: ['advertiserId', 'lineItemId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        bulkListLineItemAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/lineItems/{+lineItemId}:bulkListLineItemAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'lineItemId'],\n                pathParams: ['advertiserId', 'lineItemId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/advertisers/{+advertiserId}/lineItems').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/lineItems/{+lineItemId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'lineItemId'],\n                pathParams: ['advertiserId', 'lineItemId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/lineItems/{+lineItemId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'lineItemId'],\n                pathParams: ['advertiserId', 'lineItemId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/advertisers/{+advertiserId}/lineItems').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/lineItems/{+lineItemId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'lineItemId'],\n                pathParams: ['advertiserId', 'lineItemId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Advertisers$Lineitems = Resource$Advertisers$Lineitems;\n    class Resource$Advertisers$Lineitems$Targetingtypes {\n        constructor(context) {\n            this.context = context;\n            this.assignedTargetingOptions = new Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions(this.context);\n        }\n    }\n    displayvideo_v1.Resource$Advertisers$Lineitems$Targetingtypes = Resource$Advertisers$Lineitems$Targetingtypes;\n    class Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'lineItemId', 'targetingType'],\n                pathParams: ['advertiserId', 'lineItemId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: [\n                    'advertiserId',\n                    'lineItemId',\n                    'targetingType',\n                    'assignedTargetingOptionId',\n                ],\n                pathParams: [\n                    'advertiserId',\n                    'assignedTargetingOptionId',\n                    'lineItemId',\n                    'targetingType',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [\n                    'advertiserId',\n                    'lineItemId',\n                    'targetingType',\n                    'assignedTargetingOptionId',\n                ],\n                pathParams: [\n                    'advertiserId',\n                    'assignedTargetingOptionId',\n                    'lineItemId',\n                    'targetingType',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'lineItemId', 'targetingType'],\n                pathParams: ['advertiserId', 'lineItemId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions = Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions;\n    class Resource$Advertisers$Locationlists {\n        constructor(context) {\n            this.context = context;\n            this.assignedLocations = new Resource$Advertisers$Locationlists$Assignedlocations(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/advertisers/{+advertiserId}/locationLists').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/locationLists/{+locationListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'locationListId'],\n                pathParams: ['advertiserId', 'locationListId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/advertisers/{+advertiserId}/locationLists').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/locationLists/{locationListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'locationListId'],\n                pathParams: ['advertiserId', 'locationListId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Advertisers$Locationlists = Resource$Advertisers$Locationlists;\n    class Resource$Advertisers$Locationlists$Assignedlocations {\n        constructor(context) {\n            this.context = context;\n        }\n        bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{advertiserId}/locationLists/{+locationListId}/assignedLocations:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'locationListId'],\n                pathParams: ['advertiserId', 'locationListId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'locationListId'],\n                pathParams: ['advertiserId', 'locationListId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations/{+assignedLocationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: [\n                    'advertiserId',\n                    'locationListId',\n                    'assignedLocationId',\n                ],\n                pathParams: ['advertiserId', 'assignedLocationId', 'locationListId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'locationListId'],\n                pathParams: ['advertiserId', 'locationListId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Advertisers$Locationlists$Assignedlocations = Resource$Advertisers$Locationlists$Assignedlocations;\n    class Resource$Advertisers$Manualtriggers {\n        constructor(context) {\n            this.context = context;\n        }\n        activate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/manualTriggers/{+triggerId}:activate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'triggerId'],\n                pathParams: ['advertiserId', 'triggerId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/advertisers/{+advertiserId}/manualTriggers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deactivate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/manualTriggers/{+triggerId}:deactivate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'triggerId'],\n                pathParams: ['advertiserId', 'triggerId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/manualTriggers/{+triggerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'triggerId'],\n                pathParams: ['advertiserId', 'triggerId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/advertisers/{+advertiserId}/manualTriggers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/manualTriggers/{+triggerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'triggerId'],\n                pathParams: ['advertiserId', 'triggerId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Advertisers$Manualtriggers = Resource$Advertisers$Manualtriggers;\n    class Resource$Advertisers$Negativekeywordlists {\n        constructor(context) {\n            this.context = context;\n            this.negativeKeywords = new Resource$Advertisers$Negativekeywordlists$Negativekeywords(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/advertisers/{+advertiserId}/negativeKeywordLists').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/negativeKeywordLists/{+negativeKeywordListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'negativeKeywordListId'],\n                pathParams: ['advertiserId', 'negativeKeywordListId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/negativeKeywordLists/{+negativeKeywordListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'negativeKeywordListId'],\n                pathParams: ['advertiserId', 'negativeKeywordListId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/advertisers/{+advertiserId}/negativeKeywordLists').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/negativeKeywordLists/{negativeKeywordListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'negativeKeywordListId'],\n                pathParams: ['advertiserId', 'negativeKeywordListId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Advertisers$Negativekeywordlists = Resource$Advertisers$Negativekeywordlists;\n    class Resource$Advertisers$Negativekeywordlists$Negativekeywords {\n        constructor(context) {\n            this.context = context;\n        }\n        bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'negativeKeywordListId'],\n                pathParams: ['advertiserId', 'negativeKeywordListId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'negativeKeywordListId'],\n                pathParams: ['advertiserId', 'negativeKeywordListId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords/{+keywordValue}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: [\n                    'advertiserId',\n                    'negativeKeywordListId',\n                    'keywordValue',\n                ],\n                pathParams: ['advertiserId', 'keywordValue', 'negativeKeywordListId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'negativeKeywordListId'],\n                pathParams: ['advertiserId', 'negativeKeywordListId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Advertisers$Negativekeywordlists$Negativekeywords = Resource$Advertisers$Negativekeywordlists$Negativekeywords;\n    class Resource$Advertisers$Targetingtypes {\n        constructor(context) {\n            this.context = context;\n            this.assignedTargetingOptions = new Resource$Advertisers$Targetingtypes$Assignedtargetingoptions(this.context);\n        }\n    }\n    displayvideo_v1.Resource$Advertisers$Targetingtypes = Resource$Advertisers$Targetingtypes;\n    class Resource$Advertisers$Targetingtypes$Assignedtargetingoptions {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'targetingType'],\n                pathParams: ['advertiserId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: [\n                    'advertiserId',\n                    'targetingType',\n                    'assignedTargetingOptionId',\n                ],\n                pathParams: [\n                    'advertiserId',\n                    'assignedTargetingOptionId',\n                    'targetingType',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [\n                    'advertiserId',\n                    'targetingType',\n                    'assignedTargetingOptionId',\n                ],\n                pathParams: [\n                    'advertiserId',\n                    'assignedTargetingOptionId',\n                    'targetingType',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'targetingType'],\n                pathParams: ['advertiserId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Advertisers$Targetingtypes$Assignedtargetingoptions = Resource$Advertisers$Targetingtypes$Assignedtargetingoptions;\n    class Resource$Combinedaudiences {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/combinedAudiences/{+combinedAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['combinedAudienceId'],\n                pathParams: ['combinedAudienceId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/combinedAudiences').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Combinedaudiences = Resource$Combinedaudiences;\n    class Resource$Custombiddingalgorithms {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/customBiddingAlgorithms/{+customBiddingAlgorithmId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customBiddingAlgorithmId'],\n                pathParams: ['customBiddingAlgorithmId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/customBiddingAlgorithms').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Custombiddingalgorithms = Resource$Custombiddingalgorithms;\n    class Resource$Customlists {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/customLists/{+customListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customListId'],\n                pathParams: ['customListId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/customLists').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Customlists = Resource$Customlists;\n    class Resource$Firstandthirdpartyaudiences {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/firstAndThirdPartyAudiences/{+firstAndThirdPartyAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['firstAndThirdPartyAudienceId'],\n                pathParams: ['firstAndThirdPartyAudienceId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/firstAndThirdPartyAudiences').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Firstandthirdpartyaudiences = Resource$Firstandthirdpartyaudiences;\n    class Resource$Floodlightgroups {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/floodlightGroups/{+floodlightGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['floodlightGroupId'],\n                pathParams: ['floodlightGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/floodlightGroups/{floodlightGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['floodlightGroupId'],\n                pathParams: ['floodlightGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Floodlightgroups = Resource$Floodlightgroups;\n    class Resource$Googleaudiences {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/googleAudiences/{+googleAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['googleAudienceId'],\n                pathParams: ['googleAudienceId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/googleAudiences').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Googleaudiences = Resource$Googleaudiences;\n    class Resource$Inventorysourcegroups {\n        constructor(context) {\n            this.context = context;\n            this.assignedInventorySources = new Resource$Inventorysourcegroups$Assignedinventorysources(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/inventorySourceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/inventorySourceGroups/{+inventorySourceGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceGroupId'],\n                pathParams: ['inventorySourceGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/inventorySourceGroups/{+inventorySourceGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceGroupId'],\n                pathParams: ['inventorySourceGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/inventorySourceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/inventorySourceGroups/{inventorySourceGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceGroupId'],\n                pathParams: ['inventorySourceGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Inventorysourcegroups = Resource$Inventorysourcegroups;\n    class Resource$Inventorysourcegroups$Assignedinventorysources {\n        constructor(context) {\n            this.context = context;\n        }\n        bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceGroupId'],\n                pathParams: ['inventorySourceGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceGroupId'],\n                pathParams: ['inventorySourceGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources/{+assignedInventorySourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceGroupId', 'assignedInventorySourceId'],\n                pathParams: ['assignedInventorySourceId', 'inventorySourceGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceGroupId'],\n                pathParams: ['inventorySourceGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Inventorysourcegroups$Assignedinventorysources = Resource$Inventorysourcegroups$Assignedinventorysources;\n    class Resource$Inventorysources {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/inventorySources/{+inventorySourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceId'],\n                pathParams: ['inventorySourceId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/inventorySources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Inventorysources = Resource$Inventorysources;\n    class Resource$Media {\n        constructor(context) {\n            this.context = context;\n        }\n        download(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/download/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['resourceName'],\n                pathParams: ['resourceName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Media = Resource$Media;\n    class Resource$Partners {\n        constructor(context) {\n            this.context = context;\n            this.channels = new Resource$Partners$Channels(this.context);\n            this.targetingTypes = new Resource$Partners$Targetingtypes(this.context);\n        }\n        bulkEditPartnerAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/partners/{+partnerId}:bulkEditPartnerAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['partnerId'],\n                pathParams: ['partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/partners/{+partnerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['partnerId'],\n                pathParams: ['partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/partners').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Partners = Resource$Partners;\n    class Resource$Partners$Channels {\n        constructor(context) {\n            this.context = context;\n            this.sites = new Resource$Partners$Channels$Sites(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/partners/{+partnerId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['partnerId'],\n                pathParams: ['partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/partners/{+partnerId}/channels/{+channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'channelId'],\n                pathParams: ['channelId', 'partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/partners/{+partnerId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['partnerId'],\n                pathParams: ['partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/partners/{+partnerId}/channels/{channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'channelId'],\n                pathParams: ['channelId', 'partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Partners$Channels = Resource$Partners$Channels;\n    class Resource$Partners$Channels$Sites {\n        constructor(context) {\n            this.context = context;\n        }\n        bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/partners/{partnerId}/channels/{+channelId}/sites:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'channelId'],\n                pathParams: ['channelId', 'partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/partners/{partnerId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'channelId'],\n                pathParams: ['channelId', 'partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/partners/{partnerId}/channels/{+channelId}/sites/{+urlOrAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'channelId', 'urlOrAppId'],\n                pathParams: ['channelId', 'partnerId', 'urlOrAppId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/partners/{+partnerId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'channelId'],\n                pathParams: ['channelId', 'partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Partners$Channels$Sites = Resource$Partners$Channels$Sites;\n    class Resource$Partners$Targetingtypes {\n        constructor(context) {\n            this.context = context;\n            this.assignedTargetingOptions = new Resource$Partners$Targetingtypes$Assignedtargetingoptions(this.context);\n        }\n    }\n    displayvideo_v1.Resource$Partners$Targetingtypes = Resource$Partners$Targetingtypes;\n    class Resource$Partners$Targetingtypes$Assignedtargetingoptions {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'targetingType'],\n                pathParams: ['partnerId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: [\n                    'partnerId',\n                    'targetingType',\n                    'assignedTargetingOptionId',\n                ],\n                pathParams: ['assignedTargetingOptionId', 'partnerId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [\n                    'partnerId',\n                    'targetingType',\n                    'assignedTargetingOptionId',\n                ],\n                pathParams: ['assignedTargetingOptionId', 'partnerId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'targetingType'],\n                pathParams: ['partnerId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Partners$Targetingtypes$Assignedtargetingoptions = Resource$Partners$Targetingtypes$Assignedtargetingoptions;\n    class Resource$Sdfdownloadtasks {\n        constructor(context) {\n            this.context = context;\n            this.operations = new Resource$Sdfdownloadtasks$Operations(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/sdfdownloadtasks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Sdfdownloadtasks = Resource$Sdfdownloadtasks;\n    class Resource$Sdfdownloadtasks$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Sdfdownloadtasks$Operations = Resource$Sdfdownloadtasks$Operations;\n    class Resource$Targetingtypes {\n        constructor(context) {\n            this.context = context;\n            this.targetingOptions = new Resource$Targetingtypes$Targetingoptions(this.context);\n        }\n    }\n    displayvideo_v1.Resource$Targetingtypes = Resource$Targetingtypes;\n    class Resource$Targetingtypes$Targetingoptions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/targetingTypes/{+targetingType}/targetingOptions/{+targetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['targetingType', 'targetingOptionId'],\n                pathParams: ['targetingOptionId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/targetingTypes/{+targetingType}/targetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['targetingType'],\n                pathParams: ['targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Targetingtypes$Targetingoptions = Resource$Targetingtypes$Targetingoptions;\n    class Resource$Users {\n        constructor(context) {\n            this.context = context;\n        }\n        bulkEditAssignedUserRoles(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/users/{+userId}:bulkEditAssignedUserRoles').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['userId'],\n                pathParams: ['userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/users/{+userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['userId'],\n                pathParams: ['userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/users/{+userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userId'],\n                pathParams: ['userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/users/{+userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['userId'],\n                pathParams: ['userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    displayvideo_v1.Resource$Users = Resource$Users;\n})(displayvideo_v1 = exports.displayvideo_v1 || (exports.displayvideo_v1 = {}));\n//# sourceMappingURL=v1.js.map"]},"metadata":{},"sourceType":"script"}