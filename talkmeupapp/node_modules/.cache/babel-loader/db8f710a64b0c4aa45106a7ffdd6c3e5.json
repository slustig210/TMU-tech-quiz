{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\lsslg\\\\Desktop\\\\talkmeupapp\\\\src\\\\App.js\";\nimport './App.css';\nimport React from 'react';\nimport SearchPage from './SearchPage.js';\nimport ResultsPage from './ResultsPage.js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // interests is an object with key=searched term and\n    // value=links that the user said they were interested in\n\n    this.state = {\n      curPage: 'search',\n      interests: {},\n      searchedTerm: \"\"\n    };\n    this.searchForTerm = this.searchForTerm.bind(this);\n    this.showInterest = this.showInterest.bind(this);\n    this.removeInterest = this.removeInterest.bind(this);\n  }\n\n  searchForTerm(term) {\n    // results properties:\n    // src: link to the image/video\n    // type: \"image\" or \"video\"\n    // interest: bool\n    const results = [];\n    const linksWithInterest = this.state.interests[term];\n\n    if (linksWithInterest !== undefined) {\n      results.forEach(result => result.interest = linksWithInterest.includes(result.src));\n    }\n\n    this.setState({\n      curPage: 'results',\n      results: results,\n      searchedTerm: term\n    });\n  } // showIntererst\n  // adds the link to the interests object in an array with key term\n  // return true iff state updated\n\n\n  showInterest(link) {\n    let newInterests = undefined;\n\n    if (this.state.interests[this.state.searchedTerm] === undefined) {\n      newInterests = Object.assign({}, this.state.interests); // copy interests\n\n      newInterests[this.state.searchedTerm] = [link];\n    } else if (!this.state.interests[this.state.searchedTerm].includes(link)) {\n      newInterests = Object.assign({}, this.state.interests); // copy interests\n\n      newInterests[this.state.searchedTerm].push(link);\n    } else {\n      return false;\n    }\n\n    this.setState({\n      interests: newInterests\n    });\n    return true;\n  } // removes the link from the interests obj, if it exists\n  // return true iff the object was updated\n\n\n  removeInterest(link) {\n    const inters = this.state.interests;\n\n    if (inters[this.state.searchedTerm] !== undefined) {\n      const index = inters[this.state.searchedTerm].indexOf(link);\n\n      if (index !== -1) {\n        const newInterests = Object.assign({}, inters);\n        const newArr = newInterests[this.state.searchedTerm].slice(); // copy the array\n\n        newArr.splice(index, 1); // delete the link from the array\n\n        if (newArr.length === 0) {\n          delete newInterests[this.state.searchedTerm]; // remove the term from the interests obj if the array is empty\n        } else {\n          newInterests[this.state.searchedTerm] = newArr;\n        }\n\n        this.setState({\n          interests: newInterests\n        });\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  render() {\n    switch (this.state.curPage) {\n      default:\n        this.setState({\n          curPage: 'search'\n        });\n      // falls through\n\n      case 'search':\n        return /*#__PURE__*/_jsxDEV(SearchPage, {\n          searchForTerm: this.searchForTerm\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 16\n        }, this);\n\n      case 'results':\n        return /*#__PURE__*/_jsxDEV(ResultsPage, {\n          searchedTerm: this.state.searchedTerm,\n          results: this.state.results,\n          showInterest: this.showInterest,\n          removeInterest: this.removeInterest\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 16\n        }, this);\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/lsslg/Desktop/talkmeupapp/src/App.js"],"names":["React","SearchPage","ResultsPage","App","Component","constructor","props","state","curPage","interests","searchedTerm","searchForTerm","bind","showInterest","removeInterest","term","results","linksWithInterest","undefined","forEach","result","interest","includes","src","setState","link","newInterests","Object","assign","push","inters","index","indexOf","newArr","slice","splice","length","render"],"mappings":"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","sourcesContent":["import './App.css';\nimport React from 'react';\nimport SearchPage from './SearchPage.js'\nimport ResultsPage from './ResultsPage.js'\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // interests is an object with key=searched term and\n    // value=links that the user said they were interested in\n    this.state = {curPage: 'search', interests: {}, searchedTerm: \"\"};\n\n    this.searchForTerm = this.searchForTerm.bind(this);\n    this.showInterest = this.showInterest.bind(this);\n    this.removeInterest = this.removeInterest.bind(this);\n  }\n\n  searchForTerm(term) {\n    // results properties:\n    // src: link to the image/video\n    // type: \"image\" or \"video\"\n    // interest: bool\n    const results = [];\n\n    const linksWithInterest = this.state.interests[term];\n    if (linksWithInterest !== undefined) {\n      results.forEach(result => result.interest = linksWithInterest.includes(result.src));\n    }\n    this.setState({curPage: 'results', results: results, searchedTerm: term});\n  }\n\n  // showIntererst\n  // adds the link to the interests object in an array with key term\n  // return true iff state updated\n  showInterest(link) {\n    let newInterests = undefined;\n    if (this.state.interests[this.state.searchedTerm] === undefined) {\n      newInterests = Object.assign({}, this.state.interests); // copy interests\n      newInterests[this.state.searchedTerm] = [link];\n    } else if (!this.state.interests[this.state.searchedTerm].includes(link)) {\n      newInterests = Object.assign({}, this.state.interests); // copy interests\n      newInterests[this.state.searchedTerm].push(link);\n    } else {\n      return false;\n    }\n\n    this.setState({interests: newInterests});\n    return true;\n  }\n\n  // removes the link from the interests obj, if it exists\n  // return true iff the object was updated\n  removeInterest(link) {\n    const inters = this.state.interests;\n\n    if (inters[this.state.searchedTerm] !== undefined) {\n\n      const index = inters[this.state.searchedTerm].indexOf(link);\n      if (index !== -1) {\n        const newInterests = Object.assign({}, inters);\n        const newArr = newInterests[this.state.searchedTerm].slice(); // copy the array\n        newArr.splice(index, 1);                                      // delete the link from the array\n        if (newArr.length === 0) {\n          delete newInterests[this.state.searchedTerm];               // remove the term from the interests obj if the array is empty\n        } else {\n          newInterests[this.state.searchedTerm] = newArr;\n        }\n\n        this.setState({interests: newInterests});\n        return true;\n      }\n    }\n    return false;\n  }\n\n  render() {\n    switch(this.state.curPage) {\n      default:\n        this.setState({curPage: 'search'});\n        // falls through\n      case 'search':\n        return <SearchPage searchForTerm={this.searchForTerm}/>;\n      case 'results':\n        return <ResultsPage\n          searchedTerm={this.state.searchedTerm}\n          results={this.state.results}\n          showInterest={this.showInterest}\n          removeInterest={this.removeInterest}\n        />;\n    }\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}