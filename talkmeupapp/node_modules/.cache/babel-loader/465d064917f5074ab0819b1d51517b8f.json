{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.content_v2_1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nconst googleapis_common_1 = require(\"googleapis-common\");\n\nvar content_v2_1;\n\n(function (content_v2_1) {\n  /**\n   * Content API for Shopping\n   *\n   * Manage your product listings and accounts for Google Shopping\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const content = google.content('v2.1');\n   * ```\n   */\n  class Content {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.accounts = new Resource$Accounts(this.context);\n      this.accountstatuses = new Resource$Accountstatuses(this.context);\n      this.accounttax = new Resource$Accounttax(this.context);\n      this.csses = new Resource$Csses(this.context);\n      this.datafeeds = new Resource$Datafeeds(this.context);\n      this.datafeedstatuses = new Resource$Datafeedstatuses(this.context);\n      this.liasettings = new Resource$Liasettings(this.context);\n      this.localinventory = new Resource$Localinventory(this.context);\n      this.orderinvoices = new Resource$Orderinvoices(this.context);\n      this.orderreports = new Resource$Orderreports(this.context);\n      this.orderreturns = new Resource$Orderreturns(this.context);\n      this.orders = new Resource$Orders(this.context);\n      this.ordertrackingsignals = new Resource$Ordertrackingsignals(this.context);\n      this.pos = new Resource$Pos(this.context);\n      this.products = new Resource$Products(this.context);\n      this.productstatuses = new Resource$Productstatuses(this.context);\n      this.pubsubnotificationsettings = new Resource$Pubsubnotificationsettings(this.context);\n      this.regionalinventory = new Resource$Regionalinventory(this.context);\n      this.regions = new Resource$Regions(this.context);\n      this.repricingrules = new Resource$Repricingrules(this.context);\n      this.returnaddress = new Resource$Returnaddress(this.context);\n      this.returnpolicy = new Resource$Returnpolicy(this.context);\n      this.settlementreports = new Resource$Settlementreports(this.context);\n      this.settlementtransactions = new Resource$Settlementtransactions(this.context);\n      this.shippingsettings = new Resource$Shippingsettings(this.context);\n    }\n\n  }\n\n  content_v2_1.Content = Content;\n\n  class Resource$Accounts {\n    constructor(context) {\n      this.context = context;\n      this.labels = new Resource$Accounts$Labels(this.context);\n    }\n\n    authinfo(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/accounts/authinfo').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    claimwebsite(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/accounts/{accountId}/claimwebsite').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'accountId'],\n        pathParams: ['accountId', 'merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    custombatch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/accounts/batch').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/accounts/{accountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'accountId'],\n        pathParams: ['accountId', 'merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/accounts/{accountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'accountId'],\n        pathParams: ['accountId', 'merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/accounts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    link(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/accounts/{accountId}/link').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'accountId'],\n        pathParams: ['accountId', 'merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/accounts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    listlinks(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/accounts/{accountId}/listlinks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'accountId'],\n        pathParams: ['accountId', 'merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/accounts/{accountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'accountId'],\n        pathParams: ['accountId', 'merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    updatelabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/accounts/{accountId}/updatelabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'accountId'],\n        pathParams: ['accountId', 'merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  content_v2_1.Resource$Accounts = Resource$Accounts;\n\n  class Resource$Accounts$Labels {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/accounts/{accountId}/labels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/accounts/{accountId}/labels/{labelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'labelId'],\n        pathParams: ['accountId', 'labelId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/accounts/{accountId}/labels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/accounts/{accountId}/labels/{labelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'labelId'],\n        pathParams: ['accountId', 'labelId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  content_v2_1.Resource$Accounts$Labels = Resource$Accounts$Labels;\n\n  class Resource$Accountstatuses {\n    constructor(context) {\n      this.context = context;\n    }\n\n    custombatch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/accountstatuses/batch').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/accountstatuses/{accountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'accountId'],\n        pathParams: ['accountId', 'merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/accountstatuses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  content_v2_1.Resource$Accountstatuses = Resource$Accountstatuses;\n\n  class Resource$Accounttax {\n    constructor(context) {\n      this.context = context;\n    }\n\n    custombatch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/accounttax/batch').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/accounttax/{accountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'accountId'],\n        pathParams: ['accountId', 'merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/accounttax').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/accounttax/{accountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'accountId'],\n        pathParams: ['accountId', 'merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  content_v2_1.Resource$Accounttax = Resource$Accounttax;\n\n  class Resource$Csses {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{cssGroupId}/csses/{cssDomainId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['cssGroupId', 'cssDomainId'],\n        pathParams: ['cssDomainId', 'cssGroupId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{cssGroupId}/csses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['cssGroupId'],\n        pathParams: ['cssGroupId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    updatelabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{cssGroupId}/csses/{cssDomainId}/updatelabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['cssGroupId', 'cssDomainId'],\n        pathParams: ['cssDomainId', 'cssGroupId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  content_v2_1.Resource$Csses = Resource$Csses;\n\n  class Resource$Datafeeds {\n    constructor(context) {\n      this.context = context;\n    }\n\n    custombatch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/datafeeds/batch').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/datafeeds/{datafeedId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'datafeedId'],\n        pathParams: ['datafeedId', 'merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    fetchnow(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/datafeeds/{datafeedId}/fetchNow').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'datafeedId'],\n        pathParams: ['datafeedId', 'merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/datafeeds/{datafeedId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'datafeedId'],\n        pathParams: ['datafeedId', 'merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/datafeeds').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/datafeeds').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/datafeeds/{datafeedId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'datafeedId'],\n        pathParams: ['datafeedId', 'merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  content_v2_1.Resource$Datafeeds = Resource$Datafeeds;\n\n  class Resource$Datafeedstatuses {\n    constructor(context) {\n      this.context = context;\n    }\n\n    custombatch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/datafeedstatuses/batch').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/datafeedstatuses/{datafeedId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'datafeedId'],\n        pathParams: ['datafeedId', 'merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/datafeedstatuses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  content_v2_1.Resource$Datafeedstatuses = Resource$Datafeedstatuses;\n\n  class Resource$Liasettings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    custombatch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/liasettings/batch').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/liasettings/{accountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'accountId'],\n        pathParams: ['accountId', 'merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getaccessiblegmbaccounts(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/liasettings/{accountId}/accessiblegmbaccounts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'accountId'],\n        pathParams: ['accountId', 'merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/liasettings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    listposdataproviders(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/liasettings/posdataproviders').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    requestgmbaccess(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/liasettings/{accountId}/requestgmbaccess').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'accountId', 'gmbEmail'],\n        pathParams: ['accountId', 'merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    requestinventoryverification(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/liasettings/{accountId}/requestinventoryverification/{country}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'accountId', 'country'],\n        pathParams: ['accountId', 'country', 'merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setinventoryverificationcontact(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/liasettings/{accountId}/setinventoryverificationcontact').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'accountId', 'country', 'language', 'contactName', 'contactEmail'],\n        pathParams: ['accountId', 'merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setposdataprovider(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/liasettings/{accountId}/setposdataprovider').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'accountId', 'country'],\n        pathParams: ['accountId', 'merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/liasettings/{accountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'accountId'],\n        pathParams: ['accountId', 'merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  content_v2_1.Resource$Liasettings = Resource$Liasettings;\n\n  class Resource$Localinventory {\n    constructor(context) {\n      this.context = context;\n    }\n\n    custombatch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/localinventory/batch').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/products/{productId}/localinventory').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'productId'],\n        pathParams: ['merchantId', 'productId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  content_v2_1.Resource$Localinventory = Resource$Localinventory;\n\n  class Resource$Orderinvoices {\n    constructor(context) {\n      this.context = context;\n    }\n\n    createchargeinvoice(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/orderinvoices/{orderId}/createChargeInvoice').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'orderId'],\n        pathParams: ['merchantId', 'orderId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    createrefundinvoice(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/orderinvoices/{orderId}/createRefundInvoice').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'orderId'],\n        pathParams: ['merchantId', 'orderId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  content_v2_1.Resource$Orderinvoices = Resource$Orderinvoices;\n\n  class Resource$Orderreports {\n    constructor(context) {\n      this.context = context;\n    }\n\n    listdisbursements(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/orderreports/disbursements').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    listtransactions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/orderreports/disbursements/{disbursementId}/transactions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'disbursementId'],\n        pathParams: ['disbursementId', 'merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  content_v2_1.Resource$Orderreports = Resource$Orderreports;\n\n  class Resource$Orderreturns {\n    constructor(context) {\n      this.context = context;\n    }\n\n    acknowledge(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/orderreturns/{returnId}/acknowledge').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'returnId'],\n        pathParams: ['merchantId', 'returnId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    createorderreturn(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/orderreturns/createOrderReturn').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/orderreturns/{returnId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'returnId'],\n        pathParams: ['merchantId', 'returnId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/orderreturns').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    process(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/orderreturns/{returnId}/process').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'returnId'],\n        pathParams: ['merchantId', 'returnId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  content_v2_1.Resource$Orderreturns = Resource$Orderreturns;\n\n  class Resource$Orders {\n    constructor(context) {\n      this.context = context;\n    }\n\n    acknowledge(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/orders/{orderId}/acknowledge').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'orderId'],\n        pathParams: ['merchantId', 'orderId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    advancetestorder(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/testorders/{orderId}/advance').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'orderId'],\n        pathParams: ['merchantId', 'orderId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/orders/{orderId}/cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'orderId'],\n        pathParams: ['merchantId', 'orderId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    cancellineitem(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/orders/{orderId}/cancelLineItem').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'orderId'],\n        pathParams: ['merchantId', 'orderId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    canceltestorderbycustomer(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/testorders/{orderId}/cancelByCustomer').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'orderId'],\n        pathParams: ['merchantId', 'orderId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    createtestorder(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/testorders').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    createtestreturn(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/orders/{orderId}/testreturn').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'orderId'],\n        pathParams: ['merchantId', 'orderId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/orders/{orderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'orderId'],\n        pathParams: ['merchantId', 'orderId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getbymerchantorderid(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/ordersbymerchantid/{merchantOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'merchantOrderId'],\n        pathParams: ['merchantId', 'merchantOrderId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    gettestordertemplate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/testordertemplates/{templateName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'templateName'],\n        pathParams: ['merchantId', 'templateName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    instorerefundlineitem(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/orders/{orderId}/inStoreRefundLineItem').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'orderId'],\n        pathParams: ['merchantId', 'orderId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/orders').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    refunditem(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/orders/{orderId}/refunditem').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'orderId'],\n        pathParams: ['merchantId', 'orderId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    refundorder(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/orders/{orderId}/refundorder').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'orderId'],\n        pathParams: ['merchantId', 'orderId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    rejectreturnlineitem(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/orders/{orderId}/rejectReturnLineItem').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'orderId'],\n        pathParams: ['merchantId', 'orderId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    returnrefundlineitem(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/orders/{orderId}/returnRefundLineItem').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'orderId'],\n        pathParams: ['merchantId', 'orderId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setlineitemmetadata(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/orders/{orderId}/setLineItemMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'orderId'],\n        pathParams: ['merchantId', 'orderId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    shiplineitems(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/orders/{orderId}/shipLineItems').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'orderId'],\n        pathParams: ['merchantId', 'orderId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    updatelineitemshippingdetails(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/orders/{orderId}/updateLineItemShippingDetails').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'orderId'],\n        pathParams: ['merchantId', 'orderId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    updatemerchantorderid(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/orders/{orderId}/updateMerchantOrderId').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'orderId'],\n        pathParams: ['merchantId', 'orderId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    updateshipment(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/orders/{orderId}/updateShipment').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'orderId'],\n        pathParams: ['merchantId', 'orderId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  content_v2_1.Resource$Orders = Resource$Orders;\n\n  class Resource$Ordertrackingsignals {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/ordertrackingsignals').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  content_v2_1.Resource$Ordertrackingsignals = Resource$Ordertrackingsignals;\n\n  class Resource$Pos {\n    constructor(context) {\n      this.context = context;\n    }\n\n    custombatch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/pos/batch').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/pos/{targetMerchantId}/store/{storeCode}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'targetMerchantId', 'storeCode'],\n        pathParams: ['merchantId', 'storeCode', 'targetMerchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/pos/{targetMerchantId}/store/{storeCode}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'targetMerchantId', 'storeCode'],\n        pathParams: ['merchantId', 'storeCode', 'targetMerchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/pos/{targetMerchantId}/store').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'targetMerchantId'],\n        pathParams: ['merchantId', 'targetMerchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    inventory(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/pos/{targetMerchantId}/inventory').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'targetMerchantId'],\n        pathParams: ['merchantId', 'targetMerchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/pos/{targetMerchantId}/store').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'targetMerchantId'],\n        pathParams: ['merchantId', 'targetMerchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    sale(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/pos/{targetMerchantId}/sale').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'targetMerchantId'],\n        pathParams: ['merchantId', 'targetMerchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  content_v2_1.Resource$Pos = Resource$Pos;\n\n  class Resource$Products {\n    constructor(context) {\n      this.context = context;\n    }\n\n    custombatch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/products/batch').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/products/{productId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'productId'],\n        pathParams: ['merchantId', 'productId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/products/{productId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'productId'],\n        pathParams: ['merchantId', 'productId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/products').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/products').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  content_v2_1.Resource$Products = Resource$Products;\n\n  class Resource$Productstatuses {\n    constructor(context) {\n      this.context = context;\n    }\n\n    custombatch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/productstatuses/batch').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/productstatuses/{productId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'productId'],\n        pathParams: ['merchantId', 'productId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/productstatuses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  content_v2_1.Resource$Productstatuses = Resource$Productstatuses;\n\n  class Resource$Pubsubnotificationsettings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/pubsubnotificationsettings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/pubsubnotificationsettings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  content_v2_1.Resource$Pubsubnotificationsettings = Resource$Pubsubnotificationsettings;\n\n  class Resource$Regionalinventory {\n    constructor(context) {\n      this.context = context;\n    }\n\n    custombatch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/regionalinventory/batch').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/products/{productId}/regionalinventory').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'productId'],\n        pathParams: ['merchantId', 'productId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  content_v2_1.Resource$Regionalinventory = Resource$Regionalinventory;\n\n  class Resource$Regions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/regions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/regions/{regionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'regionId'],\n        pathParams: ['merchantId', 'regionId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/regions/{regionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'regionId'],\n        pathParams: ['merchantId', 'regionId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/regions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/regions/{regionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'regionId'],\n        pathParams: ['merchantId', 'regionId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  content_v2_1.Resource$Regions = Resource$Regions;\n\n  class Resource$Repricingrules {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/repricingrules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/repricingrules/{ruleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'ruleId'],\n        pathParams: ['merchantId', 'ruleId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/repricingrules/{ruleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'ruleId'],\n        pathParams: ['merchantId', 'ruleId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/repricingrules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/repricingrules/{ruleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'ruleId'],\n        pathParams: ['merchantId', 'ruleId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  content_v2_1.Resource$Repricingrules = Resource$Repricingrules;\n\n  class Resource$Returnaddress {\n    constructor(context) {\n      this.context = context;\n    }\n\n    custombatch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/returnaddress/batch').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/returnaddress/{returnAddressId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'returnAddressId'],\n        pathParams: ['merchantId', 'returnAddressId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/returnaddress/{returnAddressId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'returnAddressId'],\n        pathParams: ['merchantId', 'returnAddressId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/returnaddress').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/returnaddress').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  content_v2_1.Resource$Returnaddress = Resource$Returnaddress;\n\n  class Resource$Returnpolicy {\n    constructor(context) {\n      this.context = context;\n    }\n\n    custombatch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/returnpolicy/batch').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/returnpolicy/{returnPolicyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'returnPolicyId'],\n        pathParams: ['merchantId', 'returnPolicyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/returnpolicy/{returnPolicyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'returnPolicyId'],\n        pathParams: ['merchantId', 'returnPolicyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/returnpolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/returnpolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  content_v2_1.Resource$Returnpolicy = Resource$Returnpolicy;\n\n  class Resource$Settlementreports {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/settlementreports/{settlementId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'settlementId'],\n        pathParams: ['merchantId', 'settlementId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/settlementreports').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  content_v2_1.Resource$Settlementreports = Resource$Settlementreports;\n\n  class Resource$Settlementtransactions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/settlementreports/{settlementId}/transactions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'settlementId'],\n        pathParams: ['merchantId', 'settlementId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  content_v2_1.Resource$Settlementtransactions = Resource$Settlementtransactions;\n\n  class Resource$Shippingsettings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    custombatch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/shippingsettings/batch').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/shippingsettings/{accountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'accountId'],\n        pathParams: ['accountId', 'merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getsupportedcarriers(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/supportedCarriers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getsupportedholidays(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/supportedHolidays').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getsupportedpickupservices(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/supportedPickupServices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/shippingsettings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['merchantId'],\n        pathParams: ['merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/content/v2.1/{merchantId}/shippingsettings/{accountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['merchantId', 'accountId'],\n        pathParams: ['accountId', 'merchantId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  content_v2_1.Resource$Shippingsettings = Resource$Shippingsettings;\n})(content_v2_1 = exports.content_v2_1 || (exports.content_v2_1 = {}));","map":{"version":3,"sources":["C:/Users/lsslg/Desktop/talkmeupapp/node_modules/googleapis/build/src/apis/content/v2.1.js"],"names":["Object","defineProperty","exports","value","content_v2_1","googleapis_common_1","require","Content","constructor","options","google","context","_options","accounts","Resource$Accounts","accountstatuses","Resource$Accountstatuses","accounttax","Resource$Accounttax","csses","Resource$Csses","datafeeds","Resource$Datafeeds","datafeedstatuses","Resource$Datafeedstatuses","liasettings","Resource$Liasettings","localinventory","Resource$Localinventory","orderinvoices","Resource$Orderinvoices","orderreports","Resource$Orderreports","orderreturns","Resource$Orderreturns","orders","Resource$Orders","ordertrackingsignals","Resource$Ordertrackingsignals","pos","Resource$Pos","products","Resource$Products","productstatuses","Resource$Productstatuses","pubsubnotificationsettings","Resource$Pubsubnotificationsettings","regionalinventory","Resource$Regionalinventory","regions","Resource$Regions","repricingrules","Resource$Repricingrules","returnaddress","Resource$Returnaddress","returnpolicy","Resource$Returnpolicy","settlementreports","Resource$Settlementreports","settlementtransactions","Resource$Settlementtransactions","shippingsettings","Resource$Shippingsettings","labels","Resource$Accounts$Labels","authinfo","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","claimwebsite","custombatch","delete","get","insert","link","list","listlinks","update","updatelabels","create","patch","fetchnow","getaccessiblegmbaccounts","listposdataproviders","requestgmbaccess","requestinventoryverification","setinventoryverificationcontact","setposdataprovider","createchargeinvoice","createrefundinvoice","listdisbursements","listtransactions","acknowledge","createorderreturn","process","advancetestorder","cancel","cancellineitem","canceltestorderbycustomer","createtestorder","createtestreturn","getbymerchantorderid","gettestordertemplate","instorerefundlineitem","refunditem","refundorder","rejectreturnlineitem","returnrefundlineitem","setlineitemmetadata","shiplineitems","updatelineitemshippingdetails","updatemerchantorderid","updateshipment","inventory","sale","getsupportedcarriers","getsupportedholidays","getsupportedpickupservices"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.content_v2_1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar content_v2_1;\n(function (content_v2_1) {\n    /**\n     * Content API for Shopping\n     *\n     * Manage your product listings and accounts for Google Shopping\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const content = google.content('v2.1');\n     * ```\n     */\n    class Content {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.accounts = new Resource$Accounts(this.context);\n            this.accountstatuses = new Resource$Accountstatuses(this.context);\n            this.accounttax = new Resource$Accounttax(this.context);\n            this.csses = new Resource$Csses(this.context);\n            this.datafeeds = new Resource$Datafeeds(this.context);\n            this.datafeedstatuses = new Resource$Datafeedstatuses(this.context);\n            this.liasettings = new Resource$Liasettings(this.context);\n            this.localinventory = new Resource$Localinventory(this.context);\n            this.orderinvoices = new Resource$Orderinvoices(this.context);\n            this.orderreports = new Resource$Orderreports(this.context);\n            this.orderreturns = new Resource$Orderreturns(this.context);\n            this.orders = new Resource$Orders(this.context);\n            this.ordertrackingsignals = new Resource$Ordertrackingsignals(this.context);\n            this.pos = new Resource$Pos(this.context);\n            this.products = new Resource$Products(this.context);\n            this.productstatuses = new Resource$Productstatuses(this.context);\n            this.pubsubnotificationsettings = new Resource$Pubsubnotificationsettings(this.context);\n            this.regionalinventory = new Resource$Regionalinventory(this.context);\n            this.regions = new Resource$Regions(this.context);\n            this.repricingrules = new Resource$Repricingrules(this.context);\n            this.returnaddress = new Resource$Returnaddress(this.context);\n            this.returnpolicy = new Resource$Returnpolicy(this.context);\n            this.settlementreports = new Resource$Settlementreports(this.context);\n            this.settlementtransactions = new Resource$Settlementtransactions(this.context);\n            this.shippingsettings = new Resource$Shippingsettings(this.context);\n        }\n    }\n    content_v2_1.Content = Content;\n    class Resource$Accounts {\n        constructor(context) {\n            this.context = context;\n            this.labels = new Resource$Accounts$Labels(this.context);\n        }\n        authinfo(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/accounts/authinfo').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        claimwebsite(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/accounts/{accountId}/claimwebsite').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'accountId'],\n                pathParams: ['accountId', 'merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        custombatch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/accounts/batch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/accounts/{accountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'accountId'],\n                pathParams: ['accountId', 'merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/accounts/{accountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'accountId'],\n                pathParams: ['accountId', 'merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/accounts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        link(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/accounts/{accountId}/link').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'accountId'],\n                pathParams: ['accountId', 'merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/accounts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listlinks(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/accounts/{accountId}/listlinks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'accountId'],\n                pathParams: ['accountId', 'merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/accounts/{accountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'accountId'],\n                pathParams: ['accountId', 'merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updatelabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/accounts/{accountId}/updatelabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'accountId'],\n                pathParams: ['accountId', 'merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    content_v2_1.Resource$Accounts = Resource$Accounts;\n    class Resource$Accounts$Labels {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/accounts/{accountId}/labels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId'],\n                pathParams: ['accountId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/accounts/{accountId}/labels/{labelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'labelId'],\n                pathParams: ['accountId', 'labelId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/accounts/{accountId}/labels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId'],\n                pathParams: ['accountId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/accounts/{accountId}/labels/{labelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'labelId'],\n                pathParams: ['accountId', 'labelId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    content_v2_1.Resource$Accounts$Labels = Resource$Accounts$Labels;\n    class Resource$Accountstatuses {\n        constructor(context) {\n            this.context = context;\n        }\n        custombatch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/accountstatuses/batch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/accountstatuses/{accountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'accountId'],\n                pathParams: ['accountId', 'merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/accountstatuses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    content_v2_1.Resource$Accountstatuses = Resource$Accountstatuses;\n    class Resource$Accounttax {\n        constructor(context) {\n            this.context = context;\n        }\n        custombatch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/accounttax/batch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/accounttax/{accountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'accountId'],\n                pathParams: ['accountId', 'merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/accounttax').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/accounttax/{accountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'accountId'],\n                pathParams: ['accountId', 'merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    content_v2_1.Resource$Accounttax = Resource$Accounttax;\n    class Resource$Csses {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{cssGroupId}/csses/{cssDomainId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['cssGroupId', 'cssDomainId'],\n                pathParams: ['cssDomainId', 'cssGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{cssGroupId}/csses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['cssGroupId'],\n                pathParams: ['cssGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updatelabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{cssGroupId}/csses/{cssDomainId}/updatelabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['cssGroupId', 'cssDomainId'],\n                pathParams: ['cssDomainId', 'cssGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    content_v2_1.Resource$Csses = Resource$Csses;\n    class Resource$Datafeeds {\n        constructor(context) {\n            this.context = context;\n        }\n        custombatch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/datafeeds/batch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/datafeeds/{datafeedId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'datafeedId'],\n                pathParams: ['datafeedId', 'merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        fetchnow(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/datafeeds/{datafeedId}/fetchNow').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'datafeedId'],\n                pathParams: ['datafeedId', 'merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/datafeeds/{datafeedId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'datafeedId'],\n                pathParams: ['datafeedId', 'merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/datafeeds').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/datafeeds').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/datafeeds/{datafeedId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'datafeedId'],\n                pathParams: ['datafeedId', 'merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    content_v2_1.Resource$Datafeeds = Resource$Datafeeds;\n    class Resource$Datafeedstatuses {\n        constructor(context) {\n            this.context = context;\n        }\n        custombatch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/datafeedstatuses/batch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/datafeedstatuses/{datafeedId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'datafeedId'],\n                pathParams: ['datafeedId', 'merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/datafeedstatuses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    content_v2_1.Resource$Datafeedstatuses = Resource$Datafeedstatuses;\n    class Resource$Liasettings {\n        constructor(context) {\n            this.context = context;\n        }\n        custombatch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/liasettings/batch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/liasettings/{accountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'accountId'],\n                pathParams: ['accountId', 'merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getaccessiblegmbaccounts(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/liasettings/{accountId}/accessiblegmbaccounts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'accountId'],\n                pathParams: ['accountId', 'merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/liasettings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listposdataproviders(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/liasettings/posdataproviders').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        requestgmbaccess(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/liasettings/{accountId}/requestgmbaccess').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'accountId', 'gmbEmail'],\n                pathParams: ['accountId', 'merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        requestinventoryverification(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/liasettings/{accountId}/requestinventoryverification/{country}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'accountId', 'country'],\n                pathParams: ['accountId', 'country', 'merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setinventoryverificationcontact(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/liasettings/{accountId}/setinventoryverificationcontact').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [\n                    'merchantId',\n                    'accountId',\n                    'country',\n                    'language',\n                    'contactName',\n                    'contactEmail',\n                ],\n                pathParams: ['accountId', 'merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setposdataprovider(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/liasettings/{accountId}/setposdataprovider').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'accountId', 'country'],\n                pathParams: ['accountId', 'merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/liasettings/{accountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'accountId'],\n                pathParams: ['accountId', 'merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    content_v2_1.Resource$Liasettings = Resource$Liasettings;\n    class Resource$Localinventory {\n        constructor(context) {\n            this.context = context;\n        }\n        custombatch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/localinventory/batch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/products/{productId}/localinventory').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'productId'],\n                pathParams: ['merchantId', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    content_v2_1.Resource$Localinventory = Resource$Localinventory;\n    class Resource$Orderinvoices {\n        constructor(context) {\n            this.context = context;\n        }\n        createchargeinvoice(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/orderinvoices/{orderId}/createChargeInvoice').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'orderId'],\n                pathParams: ['merchantId', 'orderId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        createrefundinvoice(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/orderinvoices/{orderId}/createRefundInvoice').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'orderId'],\n                pathParams: ['merchantId', 'orderId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    content_v2_1.Resource$Orderinvoices = Resource$Orderinvoices;\n    class Resource$Orderreports {\n        constructor(context) {\n            this.context = context;\n        }\n        listdisbursements(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/orderreports/disbursements').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listtransactions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/orderreports/disbursements/{disbursementId}/transactions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'disbursementId'],\n                pathParams: ['disbursementId', 'merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    content_v2_1.Resource$Orderreports = Resource$Orderreports;\n    class Resource$Orderreturns {\n        constructor(context) {\n            this.context = context;\n        }\n        acknowledge(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/orderreturns/{returnId}/acknowledge').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'returnId'],\n                pathParams: ['merchantId', 'returnId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        createorderreturn(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/orderreturns/createOrderReturn').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/orderreturns/{returnId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'returnId'],\n                pathParams: ['merchantId', 'returnId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/orderreturns').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        process(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/orderreturns/{returnId}/process').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'returnId'],\n                pathParams: ['merchantId', 'returnId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    content_v2_1.Resource$Orderreturns = Resource$Orderreturns;\n    class Resource$Orders {\n        constructor(context) {\n            this.context = context;\n        }\n        acknowledge(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/orders/{orderId}/acknowledge').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'orderId'],\n                pathParams: ['merchantId', 'orderId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        advancetestorder(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/testorders/{orderId}/advance').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'orderId'],\n                pathParams: ['merchantId', 'orderId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/orders/{orderId}/cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'orderId'],\n                pathParams: ['merchantId', 'orderId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        cancellineitem(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/orders/{orderId}/cancelLineItem').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'orderId'],\n                pathParams: ['merchantId', 'orderId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        canceltestorderbycustomer(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/testorders/{orderId}/cancelByCustomer').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'orderId'],\n                pathParams: ['merchantId', 'orderId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        createtestorder(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/testorders').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        createtestreturn(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/orders/{orderId}/testreturn').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'orderId'],\n                pathParams: ['merchantId', 'orderId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/orders/{orderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'orderId'],\n                pathParams: ['merchantId', 'orderId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getbymerchantorderid(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/ordersbymerchantid/{merchantOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'merchantOrderId'],\n                pathParams: ['merchantId', 'merchantOrderId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        gettestordertemplate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/testordertemplates/{templateName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'templateName'],\n                pathParams: ['merchantId', 'templateName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        instorerefundlineitem(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/orders/{orderId}/inStoreRefundLineItem').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'orderId'],\n                pathParams: ['merchantId', 'orderId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/orders').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        refunditem(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/orders/{orderId}/refunditem').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'orderId'],\n                pathParams: ['merchantId', 'orderId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        refundorder(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/orders/{orderId}/refundorder').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'orderId'],\n                pathParams: ['merchantId', 'orderId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        rejectreturnlineitem(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/orders/{orderId}/rejectReturnLineItem').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'orderId'],\n                pathParams: ['merchantId', 'orderId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        returnrefundlineitem(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/orders/{orderId}/returnRefundLineItem').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'orderId'],\n                pathParams: ['merchantId', 'orderId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setlineitemmetadata(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/orders/{orderId}/setLineItemMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'orderId'],\n                pathParams: ['merchantId', 'orderId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        shiplineitems(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/orders/{orderId}/shipLineItems').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'orderId'],\n                pathParams: ['merchantId', 'orderId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updatelineitemshippingdetails(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/orders/{orderId}/updateLineItemShippingDetails').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'orderId'],\n                pathParams: ['merchantId', 'orderId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updatemerchantorderid(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/orders/{orderId}/updateMerchantOrderId').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'orderId'],\n                pathParams: ['merchantId', 'orderId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateshipment(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/orders/{orderId}/updateShipment').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'orderId'],\n                pathParams: ['merchantId', 'orderId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    content_v2_1.Resource$Orders = Resource$Orders;\n    class Resource$Ordertrackingsignals {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/ordertrackingsignals').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    content_v2_1.Resource$Ordertrackingsignals = Resource$Ordertrackingsignals;\n    class Resource$Pos {\n        constructor(context) {\n            this.context = context;\n        }\n        custombatch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/pos/batch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/pos/{targetMerchantId}/store/{storeCode}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'targetMerchantId', 'storeCode'],\n                pathParams: ['merchantId', 'storeCode', 'targetMerchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/pos/{targetMerchantId}/store/{storeCode}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'targetMerchantId', 'storeCode'],\n                pathParams: ['merchantId', 'storeCode', 'targetMerchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/pos/{targetMerchantId}/store').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'targetMerchantId'],\n                pathParams: ['merchantId', 'targetMerchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        inventory(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/pos/{targetMerchantId}/inventory').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'targetMerchantId'],\n                pathParams: ['merchantId', 'targetMerchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/pos/{targetMerchantId}/store').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'targetMerchantId'],\n                pathParams: ['merchantId', 'targetMerchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        sale(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/pos/{targetMerchantId}/sale').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'targetMerchantId'],\n                pathParams: ['merchantId', 'targetMerchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    content_v2_1.Resource$Pos = Resource$Pos;\n    class Resource$Products {\n        constructor(context) {\n            this.context = context;\n        }\n        custombatch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/products/batch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/products/{productId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'productId'],\n                pathParams: ['merchantId', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/products/{productId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'productId'],\n                pathParams: ['merchantId', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/products').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/products').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    content_v2_1.Resource$Products = Resource$Products;\n    class Resource$Productstatuses {\n        constructor(context) {\n            this.context = context;\n        }\n        custombatch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/productstatuses/batch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/productstatuses/{productId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'productId'],\n                pathParams: ['merchantId', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/productstatuses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    content_v2_1.Resource$Productstatuses = Resource$Productstatuses;\n    class Resource$Pubsubnotificationsettings {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/pubsubnotificationsettings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/pubsubnotificationsettings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    content_v2_1.Resource$Pubsubnotificationsettings = Resource$Pubsubnotificationsettings;\n    class Resource$Regionalinventory {\n        constructor(context) {\n            this.context = context;\n        }\n        custombatch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/regionalinventory/batch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/products/{productId}/regionalinventory').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'productId'],\n                pathParams: ['merchantId', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    content_v2_1.Resource$Regionalinventory = Resource$Regionalinventory;\n    class Resource$Regions {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/regions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/regions/{regionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'regionId'],\n                pathParams: ['merchantId', 'regionId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/regions/{regionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'regionId'],\n                pathParams: ['merchantId', 'regionId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/regions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/regions/{regionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'regionId'],\n                pathParams: ['merchantId', 'regionId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    content_v2_1.Resource$Regions = Resource$Regions;\n    class Resource$Repricingrules {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/repricingrules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/repricingrules/{ruleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'ruleId'],\n                pathParams: ['merchantId', 'ruleId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/repricingrules/{ruleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'ruleId'],\n                pathParams: ['merchantId', 'ruleId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/repricingrules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/repricingrules/{ruleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'ruleId'],\n                pathParams: ['merchantId', 'ruleId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    content_v2_1.Resource$Repricingrules = Resource$Repricingrules;\n    class Resource$Returnaddress {\n        constructor(context) {\n            this.context = context;\n        }\n        custombatch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/returnaddress/batch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/returnaddress/{returnAddressId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'returnAddressId'],\n                pathParams: ['merchantId', 'returnAddressId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/returnaddress/{returnAddressId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'returnAddressId'],\n                pathParams: ['merchantId', 'returnAddressId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/returnaddress').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/returnaddress').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    content_v2_1.Resource$Returnaddress = Resource$Returnaddress;\n    class Resource$Returnpolicy {\n        constructor(context) {\n            this.context = context;\n        }\n        custombatch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/returnpolicy/batch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/returnpolicy/{returnPolicyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'returnPolicyId'],\n                pathParams: ['merchantId', 'returnPolicyId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/returnpolicy/{returnPolicyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'returnPolicyId'],\n                pathParams: ['merchantId', 'returnPolicyId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/returnpolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/returnpolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    content_v2_1.Resource$Returnpolicy = Resource$Returnpolicy;\n    class Resource$Settlementreports {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/settlementreports/{settlementId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'settlementId'],\n                pathParams: ['merchantId', 'settlementId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/settlementreports').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    content_v2_1.Resource$Settlementreports = Resource$Settlementreports;\n    class Resource$Settlementtransactions {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/settlementreports/{settlementId}/transactions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'settlementId'],\n                pathParams: ['merchantId', 'settlementId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    content_v2_1.Resource$Settlementtransactions = Resource$Settlementtransactions;\n    class Resource$Shippingsettings {\n        constructor(context) {\n            this.context = context;\n        }\n        custombatch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/shippingsettings/batch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/shippingsettings/{accountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'accountId'],\n                pathParams: ['accountId', 'merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getsupportedcarriers(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/supportedCarriers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getsupportedholidays(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/supportedHolidays').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getsupportedpickupservices(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/supportedPickupServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/content/v2.1/{merchantId}/shippingsettings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['merchantId'],\n                pathParams: ['merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://shoppingcontent.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/content/v2.1/{merchantId}/shippingsettings/{accountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['merchantId', 'accountId'],\n                pathParams: ['accountId', 'merchantId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    content_v2_1.Resource$Shippingsettings = Resource$Shippingsettings;\n})(content_v2_1 = exports.content_v2_1 || (exports.content_v2_1 = {}));\n//# sourceMappingURL=v2.1.js.map"]},"metadata":{},"sourceType":"script"}