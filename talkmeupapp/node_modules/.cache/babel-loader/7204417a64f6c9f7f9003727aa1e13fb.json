{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\lsslg\\\\Desktop\\\\talkmeupapp\\\\src\\\\App.js\";\nimport './App.css';\nimport React from 'react';\nimport SearchPage from './SearchPage.js';\nimport ResultsPage from './ResultsPage.js';\nconst GOOGLE_API_KEY = 'AIzaSyAM0zBXsd42sz2F_EcHnQMfr09CJ0pirlY'; // would make this an env var in a bigger project\n\nconst YOUTUBE_API_KEY = 'AIzaSyAee85G7oYuStRYoBOlgvpp_ky0MKgbqYQ'; // ^\n\nconst GOOGLE_CX = 'c55eb86d669bd3886'; // would make this an env var in a bigger project\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // interests is an object with key=searched term and\n    // value=links that the user said they were interested in\n\n    this.state = {\n      curPage: 'search',\n      interests: {},\n      searchedTerm: \"\",\n      results: [],\n      imageResultsStart: 0\n    };\n    this.searchForTerm = this.searchForTerm.bind(this);\n    this.setInterests = this.setInterests.bind(this);\n  }\n\n  searchForTerm(term) {\n    this.setState({\n      curPage: 'results',\n      searchedTerm: term\n    }); // results properties:\n    // src: link to the image/video\n    // type: \"image\" or \"video\"\n    // interest: bool\n\n    console.log(\"Searching for \" + term); // search for term\n    // for some reason the google API uses http2\n    // and that is not usable by an app created by create-react-app,\n    // so i will handle the http request directly (sad)\n    // the same problem happens with youtube\n\n    const req = new XMLHttpRequest(); // search for 7 images relating to term on cx, a custom search engine\n\n    req.open(\"GET\", \"https://customsearch.googleapis.com/customsearch/v1?key=\" + GOOGLE_API_KEY + \"&cx=\" + GOOGLE_CX + \"&q=\" + term + \"&num=7&searchType=IMAGE\"); // keep getting images until u get 7 valid ones\n\n    const googleImgOnReadyStateChange = () => {\n      if (req.readyState === XMLHttpRequest.DONE) {\n        const json = JSON.parse(req.responseText);\n        console.log(\"image results:\", json);\n\n        if (json[\"error\"] === undefined) {\n          // only count good results\n          const results = json.items.filter(result => result.fileFormat !== \"image/\").map(result => {\n            return {\n              src: result.link,\n              type: \"image\"\n            };\n          });\n          const linksWithInterest = this.state.interests[term];\n\n          if (linksWithInterest !== undefined) {\n            results.forEach(result => result.interest = linksWithInterest.includes(result.src));\n          }\n\n          const newStart = this.state.imageResultsStart + json.items.length;\n          const len = this.state.results.length + results.length;\n          this.setState({\n            results: this.state.results.concat(results),\n            imageResultsStart: newStart\n          });\n          console.log(\"length\", len);\n          console.log(\"newStart\", newStart);\n\n          if (len < 7) {\n            // ask for more results\n            const newReq = new XMLHttpRequest();\n            newReq.open(\"GET\", \"https://customsearch.googleapis.com/customsearch/v1?key=\" + GOOGLE_API_KEY + \"&cx=\" + GOOGLE_CX + \"&q=\" + term + \"&num=\" + (7 - len) + \"&searchType=IMAGE&start=\" + newStart);\n            newReq.onreadystatechange = googleImgOnReadyStateChange;\n            newReq.send();\n          }\n        } else {\n          console.error(\"unable to search google images for \" + term);\n          console.error(req.responseText);\n        }\n      }\n    };\n\n    req.onreadystatechange = googleImgOnReadyStateChange;\n    const req2 = new XMLHttpRequest(); // search for the 2 videos on youtube\n\n    req2.open(\"GET\", \"https://www.googleapis.com/youtube/v3/search?key=\" + YOUTUBE_API_KEY + \"&type=video&videoEmbeddable=true&maxResults=2&q=\" + term);\n\n    req2.onreadystatechange = () => {\n      if (req2.readyState === XMLHttpRequest.DONE) {\n        const json = JSON.parse(req2.responseText);\n\n        if (json[\"kind\"] === \"youtube#searchListResponse\") {\n          // get the 2 videos on youtube\n          const req3 = new XMLHttpRequest();\n          const url = \"https://www.googleapis.com/youtube/v3/videos?key=\" + YOUTUBE_API_KEY + \"&part=player,id&id=\" + json.items.map(item => item.id.videoId).join();\n          req3.open(\"GET\", url);\n\n          req3.onreadystatechange = () => {\n            if (req3.readyState === XMLHttpRequest.DONE) {\n              const json = JSON.parse(req3.responseText);\n\n              if (json[\"kind\"] === \"youtube#videoListResponse\") {\n                console.log(\"Video results: \", json);\n                const results = json.items.map(result => ({\n                  src: \"https://youtu.be/\" + result.id,\n                  player: result.player.embedHtml,\n                  type: \"video\"\n                }));\n                const linksWithInterest = this.state.interests[term];\n\n                if (linksWithInterest !== undefined) {\n                  results.forEach(result => result.interest = linksWithInterest.includes(result.src));\n                }\n\n                this.setState({\n                  results: this.state.results.concat(results)\n                });\n              } else {\n                console.error(\"Unable to retrieve youtube videos: \", req3.responseText);\n              }\n            }\n          };\n\n          req3.send();\n        } else {\n          console.error(\"Unable to search youtube: \", req2.responseText);\n        }\n      }\n    };\n\n    req.send();\n    req2.send();\n  } // links are the links with interest\n\n\n  setInterests(term, links) {\n    const interests = Object.assign({}, this.state.interests);\n\n    if (links.length > 0) {\n      interests[term] = links;\n    } else if (interests[term] !== undefined) {\n      delete interests[term];\n    }\n\n    this.setState({\n      interests: interests\n    });\n  }\n\n  render() {\n    switch (this.state.curPage) {\n      default:\n        console.error('Unknown page ' + this.state.curPage);\n        this.setState({\n          curPage: 'search'\n        });\n      // falls through\n\n      case 'search':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(SearchPage, {\n            searchForTerm: this.searchForTerm\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"InterestsButton\",\n            type: \"button\",\n            value: \"Get Interests (JSON)\",\n            onClick: () => this.setState({\n              curPage: 'interests'\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this);\n\n      case 'results':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(ResultsPage, {\n            searchedTerm: this.state.searchedTerm,\n            results: this.state.results,\n            setInterests: this.setInterests,\n            goBack: () => this.setState({\n              curPage: 'search',\n              results: [],\n              imageResultsStart: 0\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this);\n\n      case 'interests':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"code\", {\n              children: JSON.stringify(this.state.interests)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"GoBackButton\",\n            type: \"button\",\n            value: \"Go Back\",\n            onClick: () => this.setState({\n              curPage: 'search'\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this);\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/lsslg/Desktop/talkmeupapp/src/App.js"],"names":["React","SearchPage","ResultsPage","GOOGLE_API_KEY","YOUTUBE_API_KEY","GOOGLE_CX","App","Component","constructor","props","state","curPage","interests","searchedTerm","results","imageResultsStart","searchForTerm","bind","setInterests","term","setState","console","log","req","XMLHttpRequest","open","googleImgOnReadyStateChange","readyState","DONE","json","JSON","parse","responseText","undefined","items","filter","result","fileFormat","map","src","link","type","linksWithInterest","forEach","interest","includes","newStart","length","len","concat","newReq","onreadystatechange","send","error","req2","req3","url","item","id","videoId","join","player","embedHtml","links","Object","assign","render","stringify"],"mappings":"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","sourcesContent":["import './App.css';\nimport React from 'react';\nimport SearchPage from './SearchPage.js'\nimport ResultsPage from './ResultsPage.js'\n\nconst GOOGLE_API_KEY = 'AIzaSyAM0zBXsd42sz2F_EcHnQMfr09CJ0pirlY' // would make this an env var in a bigger project\nconst YOUTUBE_API_KEY = 'AIzaSyAee85G7oYuStRYoBOlgvpp_ky0MKgbqYQ' // ^\nconst GOOGLE_CX = 'c55eb86d669bd3886' // would make this an env var in a bigger project\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // interests is an object with key=searched term and\n    // value=links that the user said they were interested in\n    this.state = {curPage: 'search', interests: {}, searchedTerm: \"\", results: [], imageResultsStart: 0};\n\n    this.searchForTerm = this.searchForTerm.bind(this);\n    this.setInterests = this.setInterests.bind(this);\n  }\n\n  searchForTerm(term) {\n    this.setState({curPage: 'results', searchedTerm: term});\n\n    // results properties:\n    // src: link to the image/video\n    // type: \"image\" or \"video\"\n    // interest: bool\n    console.log(\"Searching for \" + term);\n\n    // search for term\n    // for some reason the google API uses http2\n    // and that is not usable by an app created by create-react-app,\n    // so i will handle the http request directly (sad)\n    // the same problem happens with youtube\n    const req = new XMLHttpRequest();\n    // search for 7 images relating to term on cx, a custom search engine\n    req.open(\"GET\", \"https://customsearch.googleapis.com/customsearch/v1?key=\" + GOOGLE_API_KEY +\n        \"&cx=\" + GOOGLE_CX + \"&q=\" + term + \"&num=7&searchType=IMAGE\");\n\n    // keep getting images until u get 7 valid ones\n    const googleImgOnReadyStateChange = () => {\n      if (req.readyState === XMLHttpRequest.DONE) {\n        const json = JSON.parse(req.responseText);\n\n        console.log(\"image results:\", json);\n\n        if (json[\"error\"] === undefined) {\n          // only count good results\n          const results = json.items.filter(result => result.fileFormat !== \"image/\").map(result => { return {src: result.link, type: \"image\"} });\n\n          const linksWithInterest = this.state.interests[term];\n          if (linksWithInterest !== undefined) {\n            results.forEach(result => result.interest = linksWithInterest.includes(result.src));\n          }\n\n          const newStart = this.state.imageResultsStart + json.items.length;\n          const len = this.state.results.length + results.length;\n\n          this.setState({results: this.state.results.concat(results), imageResultsStart: newStart});\n          \n          console.log(\"length\", len);\n          console.log(\"newStart\", newStart);\n          if (len < 7) {\n            // ask for more results\n            const newReq = new XMLHttpRequest();\n            newReq.open(\"GET\", \"https://customsearch.googleapis.com/customsearch/v1?key=\" + GOOGLE_API_KEY +\n                \"&cx=\" + GOOGLE_CX + \"&q=\" + term + \"&num=\" + (7 - len) + \"&searchType=IMAGE&start=\" + newStart);\n            \n            newReq.onreadystatechange = googleImgOnReadyStateChange;\n            newReq.send();\n          }\n        } else {\n          console.error(\"unable to search google images for \" + term);\n          console.error(req.responseText);\n        }\n      }\n    }\n    \n    req.onreadystatechange = googleImgOnReadyStateChange;\n\n    const req2 = new XMLHttpRequest();\n    // search for the 2 videos on youtube\n    req2.open(\"GET\", \"https://www.googleapis.com/youtube/v3/search?key=\" + YOUTUBE_API_KEY +\n        \"&type=video&videoEmbeddable=true&maxResults=2&q=\" + term);\n\n    req2.onreadystatechange = () => {\n      if (req2.readyState === XMLHttpRequest.DONE) {\n        const json = JSON.parse(req2.responseText);\n        if (json[\"kind\"] === \"youtube#searchListResponse\") {\n          \n          // get the 2 videos on youtube\n          const req3 = new XMLHttpRequest();\n          const url = \"https://www.googleapis.com/youtube/v3/videos?key=\" + YOUTUBE_API_KEY + \"&part=player,id&id=\" + json.items.map(item => item.id.videoId).join();\n          req3.open(\"GET\", url);\n              \n          req3.onreadystatechange = () => {\n            if (req3.readyState === XMLHttpRequest.DONE) {\n              const json = JSON.parse(req3.responseText);\n              if (json[\"kind\"] === \"youtube#videoListResponse\") {\n                console.log(\"Video results: \", json);\n                const results = json.items.map((result) => ({src: \"https://youtu.be/\" + result.id, player: result.player.embedHtml, type: \"video\" }));\n\n                const linksWithInterest = this.state.interests[term];\n                if (linksWithInterest !== undefined) {\n                  results.forEach(result => result.interest = linksWithInterest.includes(result.src));\n                }\n                this.setState({results: this.state.results.concat(results)});\n              } else {\n                console.error(\"Unable to retrieve youtube videos: \", req3.responseText);\n              }\n            }\n          }\n          req3.send();\n        } else {\n          console.error(\"Unable to search youtube: \", req2.responseText);\n        }\n      }\n    }\n    req.send();\n    req2.send();\n  }\n\n  // links are the links with interest\n  setInterests(term, links) {\n    const interests = Object.assign({}, this.state.interests);\n    if (links.length > 0) {\n      interests[term] = links;\n    } else if (interests[term] !== undefined) {\n      delete interests[term];\n    }\n    this.setState({interests: interests});\n  }\n\n  render() {\n    switch(this.state.curPage) {\n      default:\n        console.error('Unknown page ' + this.state.curPage);\n        this.setState({curPage: 'search'});\n        // falls through\n      case 'search':\n        return (\n          <div>\n            <SearchPage searchForTerm={this.searchForTerm}/>\n            <input className=\"InterestsButton\" type='button' value='Get Interests (JSON)' onClick={() => this.setState({curPage: 'interests'})}/>\n          </div>\n        );\n      case 'results':\n        return (\n          <div>\n            <ResultsPage\n              searchedTerm={this.state.searchedTerm}\n              results={this.state.results}\n              setInterests={this.setInterests}\n              goBack={() => this.setState({curPage: 'search', results: [], imageResultsStart: 0})}\n            />\n          </div>\n        );\n      case 'interests':\n        return (\n          <div>\n            <div>\n              <code>{JSON.stringify(this.state.interests)}</code>\n            </div>\n            <input className=\"GoBackButton\" type='button' value='Go Back' onClick={() => this.setState({curPage: 'search'})}/>\n          </div>\n        );\n    }\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}