{"version":3,"sources":["SearchPage.js","ResultsPage.js","App.js","index.js"],"names":["SearchPage","props","state","term","handleChange","event","setState","target","value","preventDefault","onSubmit","length","searchForTerm","this","className","type","placeholder","onChange","React","Component","Result","media","console","error","src","alt","searchedTerm","dangerouslySetInnerHTML","__html","player","interest","onClick","setInterest","style","color","ResultsPage","results","slice","sort","Math","random","getSetInterest","index","Object","assign","log","goBack","bind","setInterests","filter","result","map","prevProps","prevState","snapshot","copy","results2D","push","splice","row","rowIndex","colIndex","YOUTUBE_API_KEY","App","curPage","interests","req","XMLHttpRequest","open","onreadystatechange","readyState","DONE","json","JSON","parse","responseText","undefined","items","fileFormat","link","linksWithInterest","forEach","includes","concat","req2","req3","url","item","id","videoId","join","embedHtml","send","links","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed621bd1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass SearchPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {term: \"\"};\r\n\r\n        this.handleChange = event => {\r\n            this.setState({term: event.target.value});\r\n            event.preventDefault();\r\n        }\r\n\r\n        this.onSubmit = event => {\r\n            if (this.state.term.length > 0) {\r\n                this.props.searchForTerm(this.state.term);\r\n            }\r\n            event.preventDefault(); // prevent refresh of the page\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit} className=\"SearchPage\">\r\n                <table className=\"SearchPageTable\"><tbody><tr>\r\n                    <td className=\"SearchBarCell\"><input\r\n                        className=\"SearchBar\" \r\n                        type='text'\r\n                        value={this.state.term}\r\n                        placeholder='Search for something!'\r\n                        onChange={this.handleChange}\r\n                    /></td>\r\n                    <td className=\"SearchButtonCell\"><input className=\"SearchButton\" type='submit' value='Search!'/></td>\r\n                </tr></tbody></table>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchPage;","import React from 'react';\r\n\r\nfunction Result(props) {\r\n    let media = null;\r\n    switch (props.type) {\r\n        default:\r\n            console.error(\"Unkown result type: \" + props.type);\r\n            break;\r\n        case 'image':\r\n            media = <img className=\"ResultMedia\" src={props.src} alt={\"An image relating to \" + props.searchedTerm}\r\n                /*onClick={() => props.setInterest(!props.interest)}*/ />;\r\n            break;\r\n        case 'video':\r\n            media = <div className=\"ResultMedia\" dangerouslySetInnerHTML={{__html: props.player}}/>; // embed from youtube\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <div className=\"Result\">\r\n            <div>\r\n                {media}\r\n            </div>\r\n            <input\r\n                type='button'\r\n                value={props.interest ? \"Interested!\" : \"Not Interested\"}\r\n                onClick={(event) => {props.setInterest(!props.interest); event.preventDefault()}}\r\n                style={props.interest ? {color:\"green\"} : {color:\"red\"}}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass ResultsPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {results: this.props.results.slice()};\r\n        this.state.results.sort(() => Math.random() - 5); // sorts randomly\r\n\r\n        this.getSetInterest = (index) => {\r\n            return (interest) => {\r\n                const results = this.state.results.slice();\r\n                results[index] = Object.assign({}, results[index]);\r\n                results[index].interest = interest;\r\n                this.setState({results: results});\r\n                console.log(\"Setting interest of \" + results[index].src + \" to \" + interest);\r\n            }\r\n        }\r\n\r\n        this.goBack = this.goBack.bind(this);\r\n    }\r\n\r\n    goBack() {\r\n        this.props.setInterests(this.props.searchedTerm, this.state.results.filter(result => result.interest).map(result => result.src));\r\n        this.props.goBack();\r\n    }\r\n\r\n    // this is needed because the google and youtube results\r\n    // come in at different times so\r\n    // this is called when a new batch of results comes back\r\n    // from google, and it updates this.state.results\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.results !== prevProps.results) {\r\n            // props results was updated\r\n            // copy over the values + shuffle.\r\n            const results = this.props.results.slice();\r\n            results.sort(() => Math.random() - 0.5);\r\n            this.setState({results: results});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // added later so it is a little out of place, but it works\r\n        const copy = this.state.results.slice();\r\n        const results2D = [];\r\n        while(copy.length) results2D.push(copy.splice(0,3));\r\n\r\n        return (\r\n            <div className=\"ResultsPage\">\r\n                <table className=\"ResultsMatrix\"><tbody>\r\n                    {results2D.map((row, rowIndex) =>\r\n                        <tr className=\"ResultsRow\" key={rowIndex}>\r\n                            {row.map((result, colIndex) => <td className=\"ResultsCell\" key={rowIndex * 3 + colIndex}><Result\r\n                                searchedTerm={this.props.searchedTerm}\r\n                                src={result.src}\r\n                                type={result.type}\r\n                                interest={result.interest}\r\n                                player={result.player} // undefined for image, embedHtml for video.\r\n                                setInterest={this.getSetInterest(rowIndex * 3 + colIndex)}\r\n                            /></td>)}\r\n                        </tr>\r\n                    )}\r\n                </tbody></table>\r\n                <input className='GoBackButton' type='button' value='Go Back' onClick={this.goBack}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ResultsPage;","import './App.css';\nimport React from 'react';\nimport SearchPage from './SearchPage.js'\nimport ResultsPage from './ResultsPage.js'\n\nconst GOOGLE_API_KEY = 'AIzaSyAM0zBXsd42sz2F_EcHnQMfr09CJ0pirlY' // would make this an env var in a bigger project\nconst YOUTUBE_API_KEY = 'AIzaSyAee85G7oYuStRYoBOlgvpp_ky0MKgbqYQ' // ^\nconst GOOGLE_CX = 'c55eb86d669bd3886' // would make this an env var in a bigger project\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // interests is an object with key=searched term and\n    // value=links that the user said they were interested in\n    this.state = {curPage: 'search', interests: {}, searchedTerm: \"\", results: []};\n\n    this.searchForTerm = this.searchForTerm.bind(this);\n    this.setInterests = this.setInterests.bind(this);\n  }\n\n  searchForTerm(term) {\n    this.setState({curPage: 'results', searchedTerm: term});\n\n    // results properties:\n    // src: link to the image/video\n    // type: \"image\" or \"video\"\n    // interest: bool\n    console.log(\"Searching for \" + term);\n\n    // search for term\n    // for some reason the google API uses http2\n    // and that is not usable by an app created by create-react-app,\n    // so i will handle the http request directly (sad)\n    // the same problem happens with youtube\n    const req = new XMLHttpRequest();\n    // search for 7 images relating to term on cx, a custom search engine\n    // rn get 10 images, then filter for 'valid' images later on and cut off the end\n    req.open(\"GET\", \"https://customsearch.googleapis.com/customsearch/v1?key=\" + GOOGLE_API_KEY +\n        \"&cx=\" + GOOGLE_CX + \"&q=\" + term + \"&num=10&searchType=IMAGE\");\n    \n    req.onreadystatechange = () => {\n      if (req.readyState === XMLHttpRequest.DONE) {\n        const json = JSON.parse(req.responseText);\n\n        console.log(\"image results:\", json);\n\n        // valid input is kind of assumed\n        if (json[\"error\"] === undefined) {\n          // only count good results\n          const results = json.items.filter(result => result.fileFormat !== \"image/\").map(result => { return {src: result.link, type: \"image\"} });\n          results.splice(7);\n\n          const linksWithInterest = this.state.interests[term];\n          if (linksWithInterest !== undefined) {\n            results.forEach(result => result.interest = linksWithInterest.includes(result.src));\n          }\n\n          this.setState({results: this.state.results.concat(results)});\n        } else {\n          console.error(\"unable to search google images for \" + term);\n          console.error(req.responseText);\n        }\n      }\n    }\n\n    const req2 = new XMLHttpRequest();\n    // search for the 2 videos on youtube\n    req2.open(\"GET\", \"https://www.googleapis.com/youtube/v3/search?key=\" + YOUTUBE_API_KEY +\n        \"&type=video&videoEmbeddable=true&maxResults=2&q=\" + term);\n\n    req2.onreadystatechange = () => {\n      if (req2.readyState === XMLHttpRequest.DONE) {\n        const json = JSON.parse(req2.responseText);\n        if (json[\"kind\"] === \"youtube#searchListResponse\") {\n          \n          // get the 2 videos on youtube\n          const req3 = new XMLHttpRequest();\n          const url = \"https://www.googleapis.com/youtube/v3/videos?key=\" + YOUTUBE_API_KEY + \"&part=player,id&id=\" + json.items.map(item => item.id.videoId).join();\n          console.log(\"Getting from \" + url);\n          req3.open(\"GET\", url);\n              \n          req3.onreadystatechange = () => {\n            if (req3.readyState === XMLHttpRequest.DONE) {\n              const json = JSON.parse(req3.responseText);\n              if (json[\"kind\"] === \"youtube#videoListResponse\") {\n                console.log(\"Video results: \", json);\n                const results = json.items.map((result) => ({src: \"https://youtu.be/\" + result.id, player: result.player.embedHtml, type: \"video\" }));\n\n                const linksWithInterest = this.state.interests[term];\n                if (linksWithInterest !== undefined) {\n                  results.forEach(result => result.interest = linksWithInterest.includes(result.src));\n                }\n                this.setState({results: this.state.results.concat(results)});\n              } else {\n                console.error(\"Unable to retrieve youtube videos: \", req3.responseText);\n              }\n            }\n          }\n          req3.send();\n        } else {\n          console.error(\"Unable to search youtube: \", req2.responseText);\n        }\n      }\n    }\n    req.send();\n    req2.send();\n  }\n\n  // links are the links with interest\n  setInterests(term, links) {\n    const interests = Object.assign({}, this.state.interests);\n    if (links.length > 0) {\n      interests[term] = links;\n    } else if (interests[term] !== undefined) {\n      delete interests[term];\n    }\n    this.setState({interests: interests});\n  }\n\n  render() {\n    switch(this.state.curPage) {\n      default:\n        console.error('Unknown page ' + this.state.curPage);\n        this.setState({curPage: 'search'});\n        // falls through\n      case 'search':\n        return (\n          <div>\n            <SearchPage searchForTerm={this.searchForTerm}/>\n            <input className=\"InterestsButton\" type='button' value='Get Interests (JSON)' onClick={() => this.setState({curPage: 'interests'})}/>\n          </div>\n        );\n      case 'results':\n        return (\n          <div>\n            <ResultsPage\n              searchedTerm={this.state.searchedTerm}\n              results={this.state.results}\n              setInterests={this.setInterests}\n              goBack={() => this.setState({curPage: 'search', results: []})}\n            />\n          </div>\n        );\n      case 'interests':\n        return (\n          <div>\n            <div>\n              <code>{JSON.stringify(this.state.interests)}</code>\n            </div>\n            <input className=\"GoBackButton\" type='button' value='Go Back' onClick={() => this.setState({curPage: 'search'})}/>\n          </div>\n        );\n    }\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}